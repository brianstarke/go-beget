package search
/*
	GENERATED CODE, YOUR EDITS ARE FUTILE

	generated from {{.TypeName}}
	using http://github.com/brianstarke/go-beget/generator/searcher
*/

import (
  "github.com/gin-gonic/gin"
  "github.com/jmoiron/sqlx"
)

// New{{.TypeName}}SearchHandler will return a handler for {{.TypeName}}SearchRequests.
//
// The handler assumes that the {{.TypeName}}SearchRequest will be POSTed using
// JSON.
func New{{.TypeName}}SearchHandler(db *sqlx.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var sr {{.TypeName}}SearchRequest
		err := c.BindJSON(&sr)

		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		results, err := NewSQL{{.TypeName}}Searcher(db).Search(sr)

		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		c.JSON(200, results)
		return
	}
}

// New{{.TypeName}}GetByIDHandler will return a handler for {{.TypeName}} GET requests.
//
// The handler assumes that you have constructed a GET route with a path param of
// `:id` (i.e. `/api/v1/:id`) for the ID and also that the ID field of {{.TypeName}}
// is called ID.
func New{{.TypeName}}GetByIDHandler(db *sqlx.DB) gin.HandlerFunc {
  return func(c *gin.Context) {
    id := c.Param("id")

    if len(id) == 0 {
      c.JSON(500, gin.H{"error": "No ID provided"})
      return
    }

    result, err := NewSQL{{.TypeName}}Searcher(db).GetByField({{.TypeName}}ID, id)

    if err != nil {
      c.JSON(500, gin.H{"error": err.Error()})
      return
    }

    c.JSON(200, result)
    return
  }
}
