package {{.PackageName}}

// GENERATED CODE, EDITS WILL BE LOST
//
// generated from {{.PackageName}}/{{.TypeName}}
// using http://github.com/brianstarke/go-beget

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/lann/squirrel"
)

{{$numFields := len .InsertFields}}

var insertColumns{{.TypeName}} = []string{
	{{range $i, $x := .InsertFields}}"{{$x.DbName}}",
	{{end}}
}

// Create inserts a {{.TypeName}} in to the database
func (c *{{.TypeName}}) Create(db *sql.DB) (int64, error) {
	query := squirrel.Insert("{{.TableName}}").
		Columns(insertColumns{{.TypeName}}...).
		Values({{range $i, $x := .InsertFields}}c.{{$x.Name}}{{if lt $i $numFields}},{{end}}{{end}}).
		Suffix("RETURNING \"id\"").
		RunWith(db).
		PlaceholderFormat(squirrel.Dollar)

	var id int64

	err := query.QueryRow().Scan(&id)

	return id, err
}

// New{{.TypeName}}CreateHandlerFunc returns an HTTP handler func for
// {{.TypeName}} record creations. It returns 200 and the results
// on success, 400 on bad JSON, 500 on any other error.
func New{{.TypeName}}CreateHandlerFunc(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		b, err := ioutil.ReadAll(r.Body)

		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprint(w, "No {{.TypeName}} in the request body")
			return
		}

		var t {{.TypeName}}
		err = json.Unmarshal(b, &t)

		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprintf(w, "Error deserializing {{.TypeName}}: %s", err.Error())
			return
		}

		id, err := t.Create(db)

		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			fmt.Fprintf(w, "Error executing create request: %s", err.Error())
			return
		}

		jsonResult, err := json.Marshal(struct{
			ID int64 `json:"id"`
		}{
			ID: id,
		})

		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			fmt.Fprintf(w, "Error serializing create results: %s", err.Error())
			return
		}

		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, string(jsonResult))

		return
	}
}
