// Code generated by go-bindata.
// sources:
// templates/create_repo.tmpl
// templates/search_repo.tmpl
// templates/search_request.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCreate_repoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x18\x4c\x28\x4e\x70\xad\x4b\xe9\x61\xa1\x87\xed\xc6\x5b\x02\x4b\x96\x66\xb3\x87\x52\x7a\x90\xed\xb1\xa3\xae\x2d\xa5\xb2\x4c\xb7\x18\xff\xf7\x8e\x64\x87\xdd\x50\xa7\xb4\x27\x83\xa5\xf7\xe6\x7b\x33\xa3\xa3\xc8\x9f\x44\x85\x90\x1b\x14\x16\x19\x5f\xb1\xe0\x53\xba\x4d\x77\xd7\xfb\x74\x0d\x37\xf7\xeb\x34\x86\x2f\xf7\x8f\x3b\x48\xd7\x9b\xfd\x03\x5c\xef\x52\xb8\x7d\xdc\x6f\xee\x52\xc6\x82\x0a\x15\x1a\x12\x15\x50\x1a\xdd\x40\xdf\x27\xfb\x5f\x47\xdc\x8a\x06\x87\x81\x05\x5d\x2b\x55\x05\x07\x6b\x8f\x57\x9c\x57\xd2\x1e\xba\x2c\xc9\x75\xc3\x33\x23\x85\x6a\xad\x30\x4f\xc8\x2b\xfd\x36\xc3\x0a\x2d\x9f\xac\xb4\xe1\x9e\x43\x1b\xb6\xe2\x8c\xc9\xe6\xa8\x8d\x85\x88\x05\xe1\x2b\x83\xef\x8d\x96\x46\x2b\xde\xfe\xa8\x9f\xc3\xf3\xa3\x59\xef\xc9\x31\x24\x62\x4b\x7c\x2d\x84\x13\xe9\xc6\xdb\x0f\x43\xc8\x96\x8c\x71\x7e\x1e\xe0\x66\x54\x41\x81\xa5\x54\x24\xb2\x07\x04\xa9\x2c\x9a\x52\xe4\x08\x25\x9d\xd8\x83\x6c\xe1\x84\xeb\x9c\xe7\x0d\x5e\x44\x3d\x0b\xfc\x4f\x8c\x72\xf0\x24\xc9\x99\x60\x09\x11\xdd\x7d\xff\x2e\x06\x34\x46\x9b\x25\x1b\x3c\xd5\xc3\xe7\xbb\x79\xdf\xe6\x58\x63\x83\xca\xb6\x20\xdc\xa5\x73\x94\x4b\xaa\xd6\x9a\x2e\xb7\x0e\xa5\xc8\x60\xe5\x5a\x98\xac\x3f\x4e\x95\xb6\xf8\xf3\x92\xcc\xa0\xed\x8c\x3a\x55\xca\x44\x4b\x43\x9f\xbb\xc8\xca\x4e\xe5\x7f\x31\x8a\x5e\x55\x5d\xce\xf7\x8b\xd0\xc6\x6a\xf0\xe6\x82\x49\x5f\x64\x57\x45\x36\x38\xea\xbe\x5f\xa8\xae\xb9\x95\x58\x17\x2d\x5c\x7d\x80\x1a\x15\x24\xfe\x9a\xc8\x6a\x1c\xff\x0f\x63\xba\xb1\xf5\x34\x8e\x16\x8d\xef\xd9\x99\x35\x25\xcc\xb5\x29\xe8\x18\xac\xf6\xc3\x2e\x9c\x07\x05\x1d\x23\x45\x06\x56\x17\x70\x96\xf0\x3f\x53\x75\xf9\x72\x5d\x77\x8d\xf2\xc0\x5f\xbf\xd1\x44\xe8\xa1\xd0\xdf\xa0\xef\x8d\x50\xf4\x14\x17\x32\x86\xc5\xb3\x3b\xfd\x33\x0a\xed\xee\x82\x9a\x97\x8d\xe6\x61\xec\x65\xa8\x0a\xf7\xe2\x28\xe7\xa9\x75\xd3\x2e\x24\x1b\x9f\x36\x32\x49\x91\x51\xc7\xe3\x71\xf5\x9d\xdf\x49\x0f\x13\x4b\x0c\xff\x52\x3d\x4f\x7c\xf9\x51\xdc\xf7\xb2\x84\xda\x92\x00\x5e\x86\x30\x0c\xf1\xc4\x33\x7d\xdc\x1a\xff\x0e\x00\x00\xff\xff\x0d\xa1\x76\x38\x64\x04\x00\x00")

func templatesCreate_repoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreate_repoTmpl,
		"templates/create_repo.tmpl",
	)
}

func templatesCreate_repoTmpl() (*asset, error) {
	bytes, err := templatesCreate_repoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create_repo.tmpl", size: 1124, mode: os.FileMode(420), modTime: time.Unix(1458055623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearch_repoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\x3f\x03\xbf\xc2\x0e\x32\xf9\x1e\xa0\x87\xae\xf1\x8a\x02\x45\x8b\x25\xe9\x61\x18\x76\x90\x1d\xda\xd1\x1a\x4b\xa9\x24\xf7\x0f\x02\x7f\xf7\x51\xb2\x13\x24\x43\x92\xd3\x4e\x86\x45\xf2\xbd\xc7\x47\x51\x1b\x51\xbe\x88\x1a\xc1\xa2\x30\xe5\x8a\x65\x23\x16\xdd\xe5\x8f\xf9\xec\x66\x91\x4f\xe1\xf6\x69\x9a\x8f\xe1\xc7\xd3\xf3\x0c\xf2\xe9\xfd\x62\x0e\x37\xb3\x1c\xbe\x3d\x2f\xee\x1f\x72\xc6\xa2\x1a\x15\x1a\xe1\x70\x09\x95\xd1\x0d\x6c\xb7\x7c\xf1\xb9\xc1\x47\xd1\x60\xd7\xb1\xa8\xb5\x52\xd5\xb0\x72\x6e\x33\xc9\xb2\x5a\xba\x55\x5b\xf0\x52\x37\x59\x61\xa4\x50\xd6\x09\xf3\x82\x59\xad\xbf\x14\x58\xa3\xcb\x06\x28\x6d\xb2\x5e\x07\x1a\x36\xca\x18\x93\xcd\x46\x1b\x07\x09\x8b\xe2\xaa\x71\x31\x7d\xac\x33\x04\x6b\x63\xa2\x8f\x0f\x40\x7f\x37\x5a\x1a\xad\x32\xfb\xba\xfe\x88\x8f\x43\x27\xf9\x76\x2c\x84\x03\xe0\x48\xb5\x85\x78\xd0\x7f\x1f\x38\xbb\x2e\x66\x29\x63\x59\x76\xdc\xd6\x3c\xd4\xcd\x70\xa3\x41\x5a\x70\x2b\x04\xa9\x1c\x9a\x4a\x94\xc8\x3c\xcc\xf9\xec\x5d\x1a\x6c\x59\xd4\x9f\x27\x76\x08\xbf\xb6\x68\xdd\xe9\xca\x10\x4a\x21\xf9\xf9\x2b\x88\xe4\x47\x49\x63\x40\x63\xb4\x49\x59\x17\x84\xce\xbf\x3f\x9c\x65\x6f\x36\x6b\x6c\x50\x39\x0b\xc2\xe7\x41\x21\x2c\x8d\x6d\xef\x75\x90\x7e\xa1\x9e\x5c\x6f\x4b\xe7\xa5\x2f\x0b\x18\x79\x93\xf9\xf4\xeb\x40\xfb\x88\xef\x17\x2a\x0d\xba\xd6\x28\x4f\x5b\x6a\x55\xc9\xba\x35\xc4\x6b\x7c\xa4\xd2\x06\x3e\x75\x0b\xac\x6a\x55\x79\x19\x25\x39\x60\x4d\xcf\x5a\x4c\xea\x7a\x36\xb8\x3a\x0f\xb5\x5d\x16\x93\x65\xd1\xed\x2c\x0b\xe7\x5e\xda\x1b\x9a\x60\xce\xf9\x29\xd0\x08\xc1\xe9\xe0\x9e\x50\x4b\xc0\x0f\x2c\x5b\x47\xf7\x46\xba\xbe\x83\xc4\xc0\xe8\x3c\x6f\x0a\xff\x78\xe8\x7d\xbb\xb6\x5d\x93\xec\xc9\x35\x9c\xcc\xdd\x52\x97\x11\xf9\x36\x77\x66\x0c\x6f\x62\x4d\xb8\xa1\xdc\x17\xec\x66\xcf\xef\x86\x2d\x9e\xe3\x1a\x4b\x47\x1d\x24\x57\x47\x1a\x69\x0b\x22\x59\x85\xb2\xff\xae\x41\xc9\xb5\x67\xde\x39\x4d\xbf\x63\xa0\xd5\xe4\xb9\x17\x55\x25\x71\xf8\xc2\xb0\xce\xfe\x01\xf0\x7e\xf9\x51\x5f\x30\x76\x02\xff\xdb\x38\x08\xeb\x61\x92\x34\x65\x91\x97\xee\x39\xaf\xc1\xf0\x65\xc1\x7b\x75\xc9\xd5\xd0\xf2\x18\x8e\xdb\xe2\x64\xd6\x7e\xc5\xb6\x5d\xca\x39\x3f\xad\x9b\x4e\x86\x27\x84\xdf\x6a\xe5\x84\x54\x36\x39\x20\x1e\x43\xac\xe8\xd2\xea\x77\xeb\xc7\xdd\x93\x91\x55\x2e\x0e\x7e\xef\xdb\xde\xab\x20\x58\x3a\xee\x7a\xb9\x7f\x07\x09\x97\xee\xd9\x9f\x00\x00\x00\xff\xff\x79\xd9\x68\x6b\x61\x05\x00\x00")

func templatesSearch_repoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_repoTmpl,
		"templates/search_repo.tmpl",
	)
}

func templatesSearch_repoTmpl() (*asset, error) {
	bytes, err := templatesSearch_repoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_repo.tmpl", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1457110640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearch_requestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdd\x6f\xdb\x36\x10\x7f\x16\xff\x8a\x83\xd6\xa2\x76\xe0\x49\x7b\x0e\x90\x87\xae\x71\x8b\x0e\x5d\x83\x25\xce\x80\xa1\x28\x16\x5a\xa2\x6c\xae\x32\xa5\x92\xb4\xdb\x4c\xf0\xff\xbe\x3b\x92\xfa\x72\x9c\xaf\x6d\x4f\xa6\x79\xbc\xaf\xdf\xdd\xfd\x4e\x35\xcf\xbe\xf0\x95\x00\x23\xb8\xce\xd6\x2c\x3d\x61\xd1\xbb\xf9\xc7\xf9\xe5\xeb\xc5\xfc\x1c\xde\x5c\x9c\xcf\x67\xf0\xc7\xc5\xf5\x25\xcc\xcf\xdf\x2f\xae\xe0\xf5\xe5\x1c\xde\x5e\x2f\xde\x7f\x98\x33\x16\xad\x84\x12\x9a\x5b\x91\x43\xa1\xab\x0d\x34\x4d\xb2\xb8\xad\xc5\x47\xbe\x11\xfb\x3d\x8b\xb6\x46\xaa\x15\xac\xad\xad\x4f\xd3\x74\x25\xed\x7a\xbb\x4c\xb2\x6a\x93\x2e\xb5\xe4\xca\x58\xae\xbf\x88\x74\x55\xfd\xb8\x14\x2b\x61\xd3\x60\xaa\xd2\xa9\x8f\x43\x68\x76\x92\x32\x26\x37\x75\xa5\x2d\x4c\x58\x14\x17\x1b\x1b\xe3\x8f\xb1\x1a\xcd\x9a\x18\xdd\xc7\x8f\x19\x6d\x4d\xc5\x6c\xca\x18\x4b\xd3\x71\x84\x6f\xa5\x28\x73\x90\x06\x38\x14\xee\xf8\x0d\xcd\x49\x05\x76\x2d\xc6\x0f\x01\x7d\x6e\x33\x8b\x06\xec\x9a\x5b\xa7\xb1\x2c\x05\xd8\x0a\x96\x02\x55\x4b\x2b\x34\x42\x50\xa9\x19\x18\x0c\x36\x1c\x2b\x0d\x5a\xd8\xad\x56\x22\x4f\x98\x45\x5b\x47\x9d\x2b\xeb\xe2\x9a\xab\xed\xe6\x15\xa2\x88\x4a\x6b\x51\xd6\xc5\xb6\x54\xc2\x18\x96\x55\x98\x12\x4c\x9a\xe6\x85\x0d\x8a\x70\x7a\x06\x43\x90\x9b\x46\x73\x85\xc5\x7b\x21\x67\xf0\xe2\xbb\x93\x5e\xb9\xa4\x29\x42\xe7\xc3\xec\xf7\x03\x7d\xf7\xe7\x7b\x12\xf2\x6a\x1a\x59\x80\xf8\x8a\xda\xf0\xd3\xc1\x33\x1f\xdf\x19\xc8\xca\xf2\xa6\x11\x2a\x77\xce\xdc\xef\xd4\x85\xfc\x2b\xd7\x66\xcd\xcb\x85\xf8\x8e\x88\x6c\xea\x52\x6c\x84\xb2\xc6\x95\xdb\x50\xbd\xab\x12\x03\x4b\x2a\xbd\x4a\xeb\x2f\xab\x54\xa8\xac\xca\xb1\x6e\xe9\x0f\xa4\x10\x74\xb1\xc6\xc5\x56\x65\x30\x31\x47\xb0\x99\x0e\x3d\x4c\xa6\x30\xf9\xf4\x79\x79\x6b\xc5\x0c\x84\xd6\x95\x9e\x42\xc3\xa2\x1d\xd7\x90\x73\xcb\xc1\xf7\x04\x76\x84\xc1\x12\x66\x6b\x30\x24\x7d\x12\x34\x19\x37\x54\x98\xe3\xf8\x9c\xb2\x28\x72\xf6\xcf\x20\x76\xd7\xbf\x5c\x5d\x7c\xf4\xa2\x98\xec\x7b\x54\xa2\x5c\x14\x7c\x5b\x5a\x7a\xed\x2b\x0e\x4a\x96\x33\xc0\x7e\x4d\xe6\x14\x6b\x31\x89\xaf\x55\xdb\x31\x1b\x9f\x14\xdc\xbc\xdc\xdd\x00\x35\x1b\x36\x11\xa6\x65\x62\x6c\x9e\x29\x8b\xd0\x5c\xb0\xe1\xd3\x9d\x90\xff\xe9\x8c\x2c\xb2\xbd\xc3\xfd\x5a\x6d\xfe\x03\xf2\x9d\xf6\x00\xfb\x93\x63\xe0\x8f\xdc\x4c\x96\x21\x9c\xa9\x47\x9f\xe0\x45\xcc\x09\xd3\x30\x8e\xc9\x42\xcb\xcd\xc4\xff\x99\x2c\x31\xe0\x9b\xf8\x66\x3a\x28\x88\xd5\xcf\x2b\xc9\x1d\xbc\x09\xdd\x13\x83\x95\xb8\xaf\x58\x0f\x16\xe4\xe1\x5a\xbc\x7a\x69\x5e\xd1\x28\x56\x70\xcf\x9c\x52\x71\xac\x1e\x95\xa7\x2f\xc8\xf9\xd2\xbd\x71\xd3\xe9\x85\xc6\x51\x88\xa2\x8b\xaa\x70\x67\xcf\x2f\xe8\x60\x8b\xb9\x05\x8a\xb9\xfa\xed\x03\x7c\xdd\x0a\x7d\xfb\xe0\x10\x0c\xac\xe3\x10\x78\x80\x1d\xfc\xff\x7b\xa7\x87\xc4\x3c\xf2\xe7\xcb\xbb\x7d\xde\x27\x1f\xc7\x2e\xf7\x13\x36\x8a\xd8\xfb\xbc\x14\x98\x14\xb2\x16\x16\x41\x22\x89\x21\xb9\x1a\x61\x09\x87\x9a\x6b\x7c\x86\x5c\x69\x88\xe7\x98\xe7\x66\xca\x86\x58\x6f\x64\x28\x01\x78\x6f\x21\xe3\x8a\xf8\xd5\x08\x64\xf6\x52\xfe\x8d\xb4\xca\x55\x8e\x56\x8c\x11\x39\x5b\x0a\xfb\x4d\x08\x45\xd2\x9d\xcc\xc8\x8d\x01\xea\x16\xc7\xbb\x08\xb2\x03\xbb\x5d\x4f\x18\x03\x81\x8d\xdb\xc1\xba\x59\x49\x68\xb5\xdc\x2d\xf5\x38\x7e\xcf\xf9\x0e\xea\xb0\x45\x92\xd1\x03\x8f\x2b\x8b\xde\x3a\xfe\x37\x38\x20\x47\x8c\x79\x21\xdc\xfc\x65\x2a\x75\x1a\xfb\x55\x61\xe2\x1b\x16\x5d\xe8\x5c\xe8\x9f\x6f\xc7\x01\xb4\x97\x51\x14\x14\x2a\x7f\x41\x0a\xde\xdd\xa1\x17\xcf\xd2\x51\x67\x9f\xde\xe0\xeb\x7b\x8b\x13\xe2\x09\x3b\xcf\x9d\x4d\x2d\x32\x59\xc8\x8c\x00\x1b\x2f\xf0\x07\x40\x0a\x76\x7a\x8c\x7c\x20\x47\x62\x1b\x86\x46\x79\xfc\xce\xcb\x2d\x8d\x00\xaa\x17\x3c\x13\xcd\xbe\x7d\xb1\x23\x81\x83\xa6\xf6\x1f\x02\xd0\xe1\xee\xbd\x75\xf7\x2d\x38\xe1\x3f\xe9\xbc\xa9\x54\x2e\xad\xac\xd4\xa1\x52\x2f\x08\x5a\x59\x7b\x71\x1c\xa6\xb6\x04\x0e\x21\xda\xe6\x90\x4b\x2d\x32\x2b\x77\xc8\x18\x61\xf9\x3f\x13\xb1\xd6\xe4\xbf\x00\xeb\x5c\x98\x0c\x87\x8f\x86\x64\x59\x55\x65\x2b\xcf\xf1\x3a\x84\x9f\xf6\x1b\x00\x8e\xf7\x69\x8f\x75\xcb\x33\xfa\x80\xf1\x47\xcf\xa7\xf0\x4e\xd8\x05\x11\xc7\x1d\xca\xe9\x09\x22\xe9\x1e\x10\x43\x60\x1c\x4f\xb6\x1c\xa6\x05\xed\x7e\xfa\x7c\x50\x2a\x72\x11\x26\x84\x28\xec\x8e\xbc\x41\x3f\x11\x71\xc5\x9f\xb8\x5b\xe9\x85\x27\x3d\xd3\xca\x1d\x15\x06\x0b\x6e\x33\x1d\xa8\xa3\xd0\x23\x7f\x0a\x45\xe2\x0e\x33\xba\x72\x0d\x49\x57\xee\xe0\xae\xda\x4e\xa3\xdb\xf6\xec\x04\x5d\x37\x91\xa4\xfb\x43\xa2\x7d\xe7\x9a\x76\x14\xaf\x6b\x2c\xdb\x24\x5c\xcc\xc2\xa8\xb9\xfd\xd1\xc1\x18\x84\xcf\x42\x2f\xb4\x12\x55\xa5\x4d\xae\x23\x92\xce\xf0\xa1\x88\x12\x0f\x79\x9b\xee\xb2\x07\xa0\xef\xb1\x91\xbc\xbf\x9e\x51\xd8\xcf\x89\xf2\x83\xdc\x48\xfa\x62\xc3\xc6\x1b\x86\xa5\x13\x27\x78\x5e\xc2\x45\x81\xdb\xe3\x98\x2d\x2f\x79\xba\xb1\xd7\x79\xee\xfb\x60\x52\xdc\x33\x7d\x33\xd8\x1d\x72\x13\x6e\x93\x47\xc8\x68\x06\xd9\xa3\xd4\x33\xa5\xc6\xa6\x8e\xbc\x97\x48\x07\x25\x2a\xda\xba\x84\xbe\xdc\xb5\x5d\xd9\x37\x65\x35\x68\xc9\x41\x47\x66\x83\x7e\xc4\x76\x1c\xcc\x45\xd7\x90\xfd\x1d\xf6\xe4\xf4\xe9\xe0\x5d\xf5\xad\x77\x3f\x7a\xd2\x1c\xd0\x95\xfb\x46\xef\x5b\x0a\xce\x8e\xf2\xe2\xb1\xdc\x87\x3d\x39\x34\xfb\xec\x56\xf4\x5b\xd3\xb3\x4d\xc7\x63\x7e\x4d\x06\x8e\x71\xb7\x0f\x51\x8b\x7b\xeb\x99\xc5\x1d\x07\xd3\x4d\xff\x51\x21\x19\x7d\xa3\x1d\x4e\xb9\xfb\x4a\xd8\xb3\x7f\x02\x00\x00\xff\xff\x9c\x24\x4e\xb8\x66\x0f\x00\x00")

func templatesSearch_requestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_requestTmpl,
		"templates/search_request.tmpl",
	)
}

func templatesSearch_requestTmpl() (*asset, error) {
	bytes, err := templatesSearch_requestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_request.tmpl", size: 3942, mode: os.FileMode(420), modTime: time.Unix(1459861453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/create_repo.tmpl": templatesCreate_repoTmpl,
	"templates/search_repo.tmpl": templatesSearch_repoTmpl,
	"templates/search_request.tmpl": templatesSearch_requestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"create_repo.tmpl": &bintree{templatesCreate_repoTmpl, map[string]*bintree{}},
		"search_repo.tmpl": &bintree{templatesSearch_repoTmpl, map[string]*bintree{}},
		"search_request.tmpl": &bintree{templatesSearch_requestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

