// Code generated by go-bindata.
// sources:
// templates/create.tmpl
// templates/enums.tmpl
// templates/fields.tmpl
// templates/search.tmpl
// templates/update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x51\x6f\xdb\x36\x10\x7e\xb6\x7e\xc5\x4d\xc8\x0a\x39\xf0\xa8\x62\xe8\xf6\x60\x20\x0f\x4d\xec\x34\xde\x32\x27\xb3\xdd\xe5\x61\x1d\x50\x4a\x3a\xdb\x5c\x29\xd2\x25\xa9\x3a\x99\xe0\xff\xbe\x23\x29\xbb\x71\xd7\xae\x1d\xb0\xbe\xd8\x22\xf5\xdd\x77\xdf\x7d\x77\xa4\x36\xbc\x7c\xc3\x57\x08\x6d\xcb\x6e\xe3\xe3\x94\xd7\xb8\xdb\x25\x49\x9e\xc3\x8b\xf1\x74\x3c\x7b\xbe\x18\x8f\xe0\xe2\x66\x34\x1e\xc0\x78\x34\x59\xcc\xe1\x6e\x72\x7d\x0d\xe7\x63\xb8\xbe\x99\x2f\x08\xe5\x81\x2b\x54\x68\xb8\xc3\x0a\x96\x46\xd7\xff\x20\xcb\x69\x63\xf1\xb0\xd9\x53\x53\x40\x63\x85\x5a\xc1\xda\xb9\xcd\x30\xcf\x57\xc2\xad\x9b\x82\x95\xba\xce\x0b\x23\xb8\xb2\x8e\x9b\x37\x98\xaf\xf4\x77\x05\xae\xd0\x25\x89\xa8\x37\xda\x38\xc8\x92\x5e\x5a\x71\xc7\x0b\x6e\x31\xb7\x6f\x65\x4a\x6b\x54\xa5\xae\x88\x2b\xff\xd3\x6a\xe5\x37\x96\xb5\xf3\x7f\x42\xe7\x42\x37\x4e\x04\x90\x42\x97\xfb\x5c\x69\x42\x8b\x47\xd9\x24\x57\x8a\x88\x1a\x61\x0c\x12\xb0\x9f\x24\x6d\x7b\xa2\x9a\xfa\x52\xa0\xac\x2c\x0c\xcf\x40\xa2\x02\x36\x51\x16\x8d\x8b\x9b\xde\x99\x77\xdc\x80\x08\x7b\x17\x5a\x36\xb5\xb2\x47\xe5\xc1\x19\xfc\xfe\x87\x75\x86\x44\xb5\x49\xaf\x6d\x0d\x57\xe4\xef\x89\x18\xc0\xc9\xbd\xa7\xfc\x80\x2e\xa5\x94\xf7\x6c\x54\xc4\xe0\x74\xe0\x43\x50\x55\x94\x27\xf6\xe0\xc2\x20\x19\xdb\xe5\xb3\xc0\xe1\x38\x99\x50\xe0\x34\xb8\x35\xc2\xde\x99\x64\xd9\xa8\x12\xb2\x12\x4e\x8f\x90\xfd\x8e\x29\xab\x0a\x38\x25\xf3\xd8\xe8\xbc\x0f\x99\x50\xee\xc7\x67\x03\x40\x63\xb4\xe9\x03\xe9\x7d\xdb\xa0\x79\xf0\x32\xf7\xb6\x74\x72\xb3\xd4\xb3\xf1\x42\x76\x74\x69\x9f\x25\xbd\x5e\x57\x7f\xf6\x69\x37\x18\x63\x01\xf9\x1b\x97\x0d\xda\xec\xb3\x76\x94\x2c\xf8\x11\x83\xdb\x56\x2c\x41\x3a\x42\xc3\xfb\xb6\xec\x76\x83\xce\xa1\xee\x2f\xf0\xcf\x9b\xe5\x52\xdc\x67\xe9\x6c\xbc\x78\x39\x9b\x4e\xa6\x2f\xe0\x55\x2a\xaa\x57\x69\xd4\x39\x6b\xd4\x1d\xb5\x9d\x6a\x0f\xcb\x5b\xc9\x4b\x5c\x6b\x59\xa1\xb9\xd4\xa6\xe6\x2e\x3b\x54\x3b\xd2\x52\x72\x43\x93\xd0\x0b\x5d\xae\x20\x38\x44\x4b\xb2\xc8\xcb\x0d\xfe\xb0\x5f\xfd\xef\x4c\x6f\xb3\x3e\x9b\x97\x5c\x65\x4f\x44\xe5\x43\x0c\xba\xc6\x28\x8a\x0a\x8e\x76\x0d\x9c\xe2\xf6\xc8\x91\xd8\x86\x2b\xae\x2a\x49\xe9\x7d\xaf\x62\x18\xf5\x56\xc1\xd5\x62\x71\x0b\xeb\xf8\x0e\x42\x23\x97\xda\x78\x96\xe3\xae\x1b\x2c\xb5\xa9\xa0\xf4\x54\x42\x2b\xcb\x60\xe2\x0e\x34\xdf\x3f\x7d\x4a\x54\x55\x18\x0a\x83\xb6\x91\xce\x7a\x06\xad\xc0\x36\x65\x89\xd6\x0e\xe0\x19\x41\x68\x5d\xf0\x0a\x7e\x9a\xdf\x4c\x07\xf0\x43\xdc\xe0\xea\x01\x34\xc5\x99\x38\x11\x2c\xce\xd2\x67\x2b\x38\x9a\x29\x7f\xd0\xd8\xe3\xf2\xda\x83\x31\x9e\x2d\xdb\x46\xc4\x0c\xed\x86\x94\xe3\x9d\x11\x0e\xcd\x00\x0c\x9c\x76\xfb\x64\xb1\x75\x61\x18\x7b\x45\x30\xd2\xfb\x1e\x0f\x33\xbd\xe5\xd5\x73\x29\x33\xc3\xce\x75\xf5\xe0\x3d\xef\xd1\x88\x78\xcc\x37\x67\xa0\x84\x0c\x51\xbd\x2d\x0b\xac\x57\x04\x46\x93\x05\xda\xb9\xe3\xae\xb1\xe7\xbc\xda\xf3\x7b\x1c\xdd\x15\xec\x72\x43\x27\xd5\x65\xdb\x01\xa4\x53\xfd\x91\xc3\x15\x4c\x0c\x21\x50\x50\xca\x34\x04\xc6\x7a\xe8\x69\xe7\x15\xf8\x49\x71\xc7\xa1\xb4\xeb\x45\x9d\x81\xbf\x96\xd8\x4b\x55\x73\x63\xd7\x5c\x66\x54\xd0\x13\xf7\xff\xc9\x5e\x06\xdd\x63\xdf\x2b\xa8\x90\xce\x91\xe0\x52\xfc\xe5\xaf\xd6\x23\x35\x43\xf8\xd6\xa6\xc1\x4a\x16\xb0\x59\xff\x23\x55\x74\x53\xeb\xcd\x76\xec\x70\x57\xfc\x67\xad\x13\x45\xed\x54\x5c\xce\xd1\xbc\x43\x13\xd2\xfd\x8b\x68\xbc\xc7\x92\x1a\x4b\x82\xcb\x78\xcf\x75\x5e\x7f\x91\x62\xef\xed\x2c\x0c\xf8\x41\x79\xb0\xfb\x97\xce\x6c\xba\x84\x9b\xd2\x05\xb9\x93\x51\x3c\xc8\xf0\xda\x23\x86\x74\x35\xa4\xaf\x3d\x4d\xf7\x72\xe8\xcf\xac\x5f\x7f\xe5\x72\x1f\x77\xe8\x50\x70\x38\xa1\x5f\x54\xf0\x27\x55\xdc\xfc\xec\xd1\x1f\xe4\x8c\xdf\xa0\xec\xbd\x4b\xfd\x50\xdd\x9e\xd2\x7f\x60\xfe\x0e\x00\x00\xff\xff\xe7\x35\x7e\x63\xfe\x07\x00\x00")

func templatesCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateTmpl,
		"templates/create.tmpl",
	)
}

func templatesCreateTmpl() (*asset, error) {
	bytes, err := templatesCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create.tmpl", size: 2046, mode: os.FileMode(420), modTime: time.Unix(1470053426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x4b\x6f\xdb\x38\x10\x3e\x9b\xbf\x62\xa0\x45\x51\x39\x70\xad\x7b\x80\x1c\xb2\x8d\x50\x04\xf0\xda\x8b\xc4\xc5\x1e\x16\x0b\x84\x96\x46\x0f\x44\x22\x6d\x92\x6a\xb7\x08\xf2\xdf\x77\x48\xea\x41\x39\x69\x2f\xe9\xa2\x97\x84\x9c\xef\x9b\xd1\x3c\x3e\x8e\x8f\x3c\x7b\xe4\x25\xc2\xd3\xd3\xfa\x4f\x7f\xdc\xf2\x16\x9f\x9f\x19\x4b\x12\xf8\x94\x6e\xd3\xbb\xeb\x7d\x7a\x03\x1f\x77\x37\xe9\x0a\xd2\x9b\xdb\xfd\x3d\xfc\x75\xbb\xd9\xc0\xef\x29\x6c\x76\xf7\x7b\x62\x59\x62\x89\x02\x15\x37\x98\x43\xa1\x64\xfb\x22\x58\x42\x86\xfd\xb7\xe3\x10\x9a\x1c\x3a\x5d\x8b\x12\x2a\x63\x8e\x97\x49\x52\xd6\xa6\xea\x0e\xeb\x4c\xb6\xc9\x41\xd5\x5c\x68\xc3\xd5\x23\x26\xa5\xfc\x70\xc0\x12\x4d\xe2\xfe\x32\x56\xb7\x47\xa9\x0c\xc4\x6c\x11\x15\xad\x89\xe8\x9f\x36\x8a\xc2\xe8\x88\x2d\x5d\xba\xbb\xa3\x4d\x42\x2a\xa8\x35\x70\x01\x72\xb8\x1a\x09\x07\xa4\x4f\x52\x7a\xb5\x00\x0e\xf7\xc8\x55\x56\xdd\xe1\xa9\x43\x6d\xa0\xa8\x1b\x83\x8a\x19\xca\x2f\x88\x20\x8c\x0b\x99\x8a\xae\xfd\xd0\xd4\x8f\x08\x15\x36\x04\x6a\x28\x08\x1d\x68\x2c\x93\x94\xac\xcd\x28\x3d\x4d\xbe\x57\x50\x4b\xc3\xd9\x62\x2b\x4d\x7a\x62\x8b\x0d\x79\xbb\x8b\x3f\x7c\x52\x48\x8d\x52\xfb\x8a\x8b\xd9\x65\xa7\x1c\x19\xb5\x1e\xc0\xe9\xec\xb1\x5b\xbd\xed\x9a\xc6\x85\x72\x07\x5f\xf4\x47\x29\xf2\xda\xd4\x52\xf4\x55\xd7\x74\xcd\x5c\x1e\xb2\x80\xaf\x15\x9a\x0a\xe9\xa8\x40\x48\x43\xa5\xfb\x62\x41\x57\xb2\x6b\x72\xeb\x4e\x8d\xe1\x79\x4e\x9d\xe1\xce\xfb\x7a\x7b\x63\xc9\x74\xda\xdd\xd9\xbe\x91\x37\x68\xd7\x2e\x38\x2a\x74\x91\x51\xfb\x5e\x05\x1f\xfe\x61\xb3\x46\xde\xd4\xad\x6b\x91\x07\xee\x43\xbf\x76\xaa\x2f\xe9\x0f\xae\x74\xc5\x9b\x3d\xfe\x6b\x80\x86\xde\x60\x8b\xc2\x68\xa7\x16\x6d\xe5\x22\x1b\x2e\xca\xb5\x54\x65\x72\x7c\x2c\x13\x14\x99\xcc\x49\x06\xc9\x6f\xd6\xa1\xf7\xa5\x81\x16\x9d\xc8\x20\x96\xe3\x5c\x96\x61\xdc\x78\x09\xf1\xdf\xff\x1c\xbe\x19\x5c\x01\x2a\x65\xd1\x27\xb6\xf8\xc2\x15\xe4\xdc\x70\xf0\xc2\x62\x6c\xa1\xbf\xd6\x86\x6a\x97\x16\xcd\xb8\x46\x48\x4f\x97\x6c\xb1\x70\xa4\x2b\x88\xf0\x14\xf5\x76\x37\xec\x10\x12\xd6\x30\xa0\x76\xf4\x21\x68\x9b\x14\x78\x9e\xc3\xc2\x9b\x06\x46\xa0\x92\x90\x55\x4e\xe6\x57\x98\x56\x33\xdf\x61\x5b\x68\xcc\x6c\x14\xd9\x2c\xbf\xd1\xfa\x92\x77\x1e\xb8\x99\x21\x03\xdf\x8b\x35\xe4\xd5\xce\x12\x54\x7d\x4e\x10\xde\x14\x51\xdb\x73\x2c\x78\xd7\x18\x8b\x2a\x34\x9d\x12\x20\xea\x66\x05\xf4\xec\xd7\xa9\x9d\x56\x11\x47\x9f\x05\x3f\x34\x68\x35\xda\xfa\xb1\xc2\xc3\xbb\x2f\x0f\xf6\x81\xdb\xe7\x4e\x83\xd5\xd1\x0a\xe4\x92\x2d\x9e\xd9\x10\xc3\x0f\x3c\xb6\xdf\x5b\xae\x6c\x44\xe6\xd7\xdc\x67\xd1\xbe\x41\x71\xa3\x77\xa0\xb9\x8b\x49\x74\xb3\xe0\xf1\xa1\x4f\x62\xe9\x55\x67\x65\x45\x5a\x83\xcb\xab\x5e\x72\x7a\xbd\x57\x75\x1b\xfb\x4b\x7c\xa0\x34\x1f\xa2\x87\xe5\x24\x44\x4b\x1e\xa4\x68\xd5\x67\x3b\x74\x21\xa9\x7b\x76\x41\x78\xab\x17\xde\x08\xf4\x5b\xc8\x63\x4e\x77\x23\xe4\x17\xd2\xe8\xb5\x99\x81\xe3\xc2\xf2\x78\x28\xb6\x91\x33\xdb\x65\x2f\x78\x4e\x0e\xaf\x71\xfd\x3a\xeb\x33\x9a\x94\x36\xe5\x15\x2c\xc1\x73\xd6\x3c\xe8\xf9\x8a\xf4\xec\x5e\x69\x23\x6b\x58\x9c\x63\xa5\x73\x78\xd8\xa7\xaf\xc9\xee\xc7\x8a\x7b\xff\x4e\xbf\xb7\xdb\x8f\xf6\x64\xf8\xeb\x41\xc2\xa3\x39\xcd\xa4\x37\x89\xed\x67\x2e\xb7\x6c\xda\xa2\x6f\xd9\x6e\xd9\x28\x29\x5a\xcc\xe1\x8b\xe4\x22\x1f\xde\xeb\x4e\x85\x00\xd5\xf8\x13\x5f\x69\xf6\x4b\x5e\x69\x06\x17\x41\xf7\xfe\xc7\x67\x6a\xbb\xe8\xc4\x96\x51\xeb\xa8\xc3\x83\x9d\x9a\x38\x9a\xe9\xb7\xef\xcd\xf2\x1b\xab\xf9\xae\xfe\xfe\x0b\x00\x00\xff\xff\xdf\x4a\xb9\x0c\xed\x09\x00\x00")

func templatesEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumsTmpl,
		"templates/enums.tmpl",
	)
}

func templatesEnumsTmpl() (*asset, error) {
	bytes, err := templatesEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enums.tmpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1470000309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFieldsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x5d\x6f\xd3\x3c\x14\xbe\x6e\x7e\xc5\x51\xde\x4d\x4b\xa6\xbe\x0d\xd7\x93\x76\x01\xb4\x43\x43\x65\x03\xda\x89\x0b\x84\x54\x27\x3d\xf9\xd0\x12\x3b\xb3\x4f\x46\xa7\xa8\xff\x9d\x63\x27\x45\x29\xb4\x13\x62\x48\xd3\xea\x24\x3e\xcf\x79\x3e\x7c\x5c\x8b\xe4\x5e\x64\x08\x6d\x3b\xf9\xd8\x2d\x6f\x44\x85\xdb\xad\xe7\x45\x11\xbc\x9b\xdd\xcc\x3e\xbf\x5e\xce\xa6\xf0\xf6\x76\x3a\x1b\xc3\x6c\x7a\xbd\x5c\xc0\x97\xeb\xf9\x1c\xde\xcc\x60\x7e\xbb\x58\xf2\x2e\xbb\x31\x43\x89\x5a\x10\xae\x21\xd5\xaa\xfa\x0d\x2c\xe2\x17\xcb\xa7\x7a\x07\xcd\x05\x8d\x29\x64\x06\x39\x51\x7d\x11\x45\x59\x41\x79\x13\x4f\x12\x55\x45\xb1\x2e\x84\x34\x24\xf4\x3d\x46\x99\xfa\x3f\xc6\x0c\x29\x72\xff\x3d\xaf\xa8\x6a\xa5\x09\x02\x6f\xe4\xa7\x15\xf9\xfc\x63\x48\x33\x8c\xf1\xbd\xd0\xd1\xdd\xeb\x72\x55\x60\xb9\x86\xc2\x80\x80\xd4\x2d\xbf\x73\x97\x42\x02\xe5\xb8\xbf\x11\x18\xa5\x49\xc8\x02\x50\x2e\xc8\x95\xc4\x25\x02\x29\x88\x91\x6b\x4b\x42\xcd\xc2\x94\x1c\x83\xe1\xfe\xfd\x52\x69\xd0\x48\x8d\x96\xb8\x9e\x78\xc4\x60\x07\xbb\x4b\x72\xc4\xae\x44\xb3\x01\x94\x4d\x75\xc6\x06\x71\x65\x8e\x65\x9d\x36\xa5\x44\x63\xbc\x44\xb1\x5e\x08\xda\xf6\x84\xfa\x6a\xb8\xb8\x84\xa1\x5d\x6d\xab\x85\xe4\x88\x4e\x8a\x31\x9c\x6c\xdc\x57\x07\x6f\xb6\xdb\x41\x95\x7b\xd8\x4c\x7a\x4d\x6d\x5b\xa4\x80\x0f\x5c\x03\xaf\x7e\xd9\xd6\x51\xbb\x84\x42\x91\x68\x5b\x94\x6b\xd7\xc2\xfd\xb2\x8d\x96\xee\xfb\xc5\xed\x0d\x48\xcb\xc4\x91\x13\x92\x5e\x48\x33\x39\xca\xb3\x4b\x90\xd9\xf8\xee\xad\xed\xdc\x7d\xf1\x07\x9c\x98\xd2\x34\x76\x58\xae\x6f\xe7\xbb\x71\x49\x3a\x96\x2a\x75\xeb\x2e\x66\x8e\xad\x31\x08\x7d\xd2\x8b\x4f\x73\x78\x68\x50\x3f\x79\x69\x23\x13\x08\xcc\x81\x98\xc2\x21\x7a\x10\xee\x38\xb5\xde\xc8\xf0\x99\x49\x72\x30\x76\xfd\x9c\x3c\x61\x6c\xfc\x87\x25\x5e\x78\xa3\x51\xc7\xb8\xd7\x38\x8d\x77\x0a\x47\x3b\xfb\x47\xfc\xb7\xdb\xe3\x7b\xdd\xec\x7d\x10\xda\xe4\xa2\x5c\xe2\x86\x8f\x64\x55\x97\x58\x21\xe7\xe0\x46\xc6\xd8\x99\x51\x25\xd3\x99\x28\x9d\x45\xf5\x7d\x16\xa1\x4c\xd4\x9a\x59\x47\xff\xd9\x82\xbe\x16\xf5\xb3\xaa\x07\x1d\x58\x75\xf0\xf5\x5b\xfc\x44\x38\x06\xd4\x5a\xe9\xd0\x4a\x7e\x14\x1a\xd6\x82\x44\xef\x88\xf7\xef\x0c\x71\xa8\x97\x70\xf4\x5c\x0c\xac\x59\x63\x2a\x9a\x92\x06\x36\xca\xa2\x1c\x03\xdf\x00\x93\x99\x65\x9a\x06\xfe\x9d\xdc\x0d\x6c\xd5\x49\x82\xd5\xe9\xe3\xca\x1d\x01\x9e\x61\x16\x65\x7c\x9e\xdd\x70\x68\x73\x27\x36\xb0\x3c\xc2\xb1\x45\xec\x5d\xbf\x93\xd5\x0b\x7c\xff\x59\x3d\x70\xfe\xfc\x90\xf5\x7b\x6d\x82\xb8\xa7\x13\x76\xde\xbb\x93\x47\xda\x3a\xda\x5f\x70\x93\xa5\x2e\xaa\xa0\x7b\x08\x62\x26\xbc\xf2\x57\xe1\x20\x0e\xd2\x7f\x12\xc8\x51\xb7\xad\xb7\xe7\x86\xf3\xf8\xab\x38\x9e\x4f\xe2\xec\xd4\x9c\xd9\x7b\x50\xc1\x91\x4b\xd2\x46\x43\x7a\x2f\x9c\x2e\x8e\x1f\x01\x00\x00\xff\xff\x3c\xdc\x60\x90\x9a\x06\x00\x00")

func templatesFieldsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFieldsTmpl,
		"templates/fields.tmpl",
	)
}

func templatesFieldsTmpl() (*asset, error) {
	bytes, err := templatesFieldsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/fields.tmpl", size: 1690, mode: os.FileMode(420), modTime: time.Unix(1470001987, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearchTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x6d\x6f\xdb\x46\xf2\x7f\x6d\x7f\x8a\x29\x81\x7f\xfe\xa4\xab\xa3\x8c\x5e\xae\x2f\x84\x2a\x87\xd8\x52\x12\x5d\x55\xc9\xb5\x94\xcb\x8b\x20\xb8\x50\xe4\x52\x62\x43\x71\xe5\x5d\xca\x76\xea\xfa\xbb\xdf\xcc\xec\xf2\xd1\xb2\x2a\x1b\x41\x81\x3b\x1c\x1a\x71\x77\x66\x76\x7e\xf3\xbc\xeb\x4d\x10\x7e\x09\x96\x02\xee\xee\xfc\x0b\xf3\x73\x12\xac\xc5\xfd\xfd\xf1\x71\xb7\x0b\x6f\x87\x93\xe1\xe5\xeb\xf9\x70\x00\xe7\xd3\xc1\xb0\x03\xc3\xc1\x68\x3e\x83\x0f\xa3\xf1\x18\xce\x86\x30\x9e\xce\xe6\x48\x45\x84\x4b\x91\x09\x15\xe4\x22\x82\x58\xc9\xf5\x03\x61\x5d\x5c\x98\x7f\xdd\x14\xa2\x91\x61\xab\x93\x6c\x09\xab\x3c\xdf\xf4\xba\xdd\x65\x92\xaf\xb6\x0b\x3f\x94\xeb\xee\x42\x25\x41\xa6\xf3\x40\x7d\x11\xdd\xa5\xfc\xdb\x42\x2c\x45\xde\xe5\xff\x1e\x1f\x27\xeb\x8d\x54\x39\xb8\xc7\x47\x4e\x14\xe4\xc1\x22\xd0\xa2\xab\xaf\x52\x07\xbf\x45\x16\xca\x08\x25\x76\x7f\xd3\x32\xa3\x85\x78\x9d\xd3\x3f\x89\xec\x26\x72\x9b\x27\x4c\x94\xa1\x28\x3a\x91\x7e\xeb\x5c\x21\xb9\x76\x8e\xf1\x77\xed\xf8\xdf\xd6\x32\x51\x32\x23\xb1\xb7\xb4\xa7\xaf\xa0\xbe\x9d\x06\x19\xed\x6d\x13\xa5\x04\x8a\xf4\xd8\x48\x0d\x6c\x33\x11\xa8\x70\x75\x29\xae\xb6\x42\xe7\x90\x68\x08\x40\x0b\xc4\x94\x26\xbf\x07\x8b\x54\x40\x73\x3f\x96\xaa\xc9\xee\x1f\xe7\xf8\x7b\x9f\x48\x54\x7c\x1b\xe6\x70\x77\x7c\xf4\x26\x11\x69\xa4\xe1\xe3\xa7\x06\x35\xaf\xc2\x67\xb2\x43\xcf\x89\x99\xc4\xf9\x4c\xc4\x69\x2e\xd4\x0e\x6a\x5a\xae\xc8\x99\x88\xe8\xa7\x2a\x12\xea\xec\x2b\x9c\x34\xc8\x8b\x55\x4b\x2f\xcd\x27\xd1\x8f\x93\x75\x82\x78\xb3\xbc\xd8\x4b\x69\x81\x25\xc5\xb1\x16\x8d\x2d\xc9\x2b\xb8\x77\xff\xd0\x7e\x56\x21\x36\x9c\x51\x07\xf4\x46\x84\x49\x9c\x84\x90\xcb\x26\xed\x0e\x5b\x59\xf6\x96\x91\xda\x34\x6d\x0b\x91\x9a\xff\x0e\xd2\xad\x20\x2d\x85\x8a\x83\x50\xdc\xdd\x17\x14\xd7\xb4\xc1\x40\x36\x14\xe2\xe8\xb1\xf2\x47\x81\xc7\x7e\x13\xd1\xb9\xcc\xa2\x24\x4f\x64\x06\xd5\x2f\x4b\x16\x16\x0b\xbb\x91\x17\xb6\x35\x31\x43\x81\x1e\x25\x4a\x84\x79\x72\x2d\x20\x5f\x05\x1c\x4c\x4f\x31\x45\x21\xef\x19\xb6\x18\xe9\x81\xd0\xa1\xc8\x28\xa3\x60\x21\x65\x5a\x50\x24\xb5\x8d\x12\xc5\xeb\x28\xaa\x7b\x6d\x25\x52\xb4\x07\xac\x45\xbe\x92\x11\x29\x1a\x44\x51\xe5\x4c\xfa\x6e\x26\x81\x0f\x80\x5a\x46\x22\x0e\xb6\x69\xde\x21\x81\xf9\x4a\x40\x61\x53\x92\x39\xfc\x15\x82\x2c\xe2\xe5\xd2\x86\xb4\xfe\x7a\x32\x40\xe6\x51\x0c\x5f\xe5\x16\x6e\x02\x0c\x30\x94\x2e\xaf\x85\x52\x49\x64\x6c\xd6\xb3\xe5\x09\xae\x03\x0c\x0a\xd5\x3c\x98\x37\xb4\xf2\x4b\xfd\x5d\x74\x51\x8a\x6e\xec\x80\xa3\x44\x84\xff\xc4\xdb\x2c\x74\xe3\x56\x0e\x18\x5a\xef\x8e\xd9\x01\x62\xbf\x0c\x87\x3e\xbc\x9d\x97\xab\x95\xfb\xfb\x30\xbd\xe4\xe5\x7b\xcf\xaa\x43\x68\x50\xe7\xff\x57\x02\x82\x34\xc5\x02\x91\xfb\xc7\x74\x16\xb8\xa8\xe3\xc9\xe3\xc9\xef\x55\xb6\x76\xe3\x47\x9c\xd9\x81\xeb\x76\x24\x77\x20\x8c\x97\xe0\xfb\xfe\x3e\x3c\xde\xbe\x83\x29\x7a\x62\xe8\xf5\x77\x25\x1b\x6e\x99\xc8\xea\x01\xeb\xd4\xc1\xef\xc2\x24\x3d\x80\xe1\x15\x2d\x94\xd6\xe8\xc1\xeb\x8c\x49\x38\xdf\x7a\xc0\xc6\x5a\xe7\xfe\x6c\x83\xf5\x38\x77\x59\x77\x0f\xf7\x31\xb4\x8e\xa8\x3a\xfe\x07\x95\xa7\x83\x55\x90\x61\x93\x22\x1c\x74\x5e\xe8\xbe\x88\x3d\x43\x84\x0e\x2c\x6a\x5b\x1f\x82\xcd\x06\x83\xd3\xad\xd6\xd0\x87\x58\xa4\x8f\x94\xc8\xb7\x2a\x43\x67\xd7\x43\x96\xab\x27\x06\xa7\x36\x7a\x6b\x8a\x1e\x8a\x31\x2d\x52\x4c\x3b\x8c\xac\x77\x8d\x48\x26\x6d\xc2\x55\x90\x64\xb0\xd8\x26\x29\xa7\x46\xb0\xbf\xfc\x3f\xc9\xa9\xa4\x81\x6b\x15\x41\x57\x3d\x74\xec\x9f\x3a\x88\x51\x33\x7f\xd3\x10\xb4\xd4\xb1\x18\x51\xf2\x2e\x7b\xcc\x44\x6e\x0a\x38\x86\xa2\x66\x23\xf0\xe7\x41\x36\xd8\x63\x80\x03\xf1\x17\xa7\xbb\x69\xd1\x44\x0e\xc1\x6a\x14\xee\x03\x33\xed\xc6\x64\x5b\x4f\x09\xca\x7c\xff\x75\xa8\xcc\x79\xae\x2c\x3b\xe0\x21\xb8\xac\xd2\x7d\x30\x6c\xbb\x91\x5d\xd0\xc8\xd6\xc2\xc5\x65\xc5\x58\x85\x46\xa3\x08\xb0\xf6\xd0\xee\x86\x68\xb3\xed\x7a\x81\x88\x89\x84\xbf\x75\xf2\xbb\x38\x34\x3e\xed\x79\x2e\x31\x4e\x58\x4e\x87\x85\xcc\x50\xc6\x41\xa8\x4a\x00\x3e\xe6\x6e\x65\x97\x4a\x1e\x9c\x94\x02\x3d\x4b\x63\x22\xa2\x5c\xad\x39\xb5\xe8\x6b\x25\x7a\x5a\xc0\x1e\x72\x98\x5f\x9f\xeb\x4a\x73\xea\x9e\xb2\x9b\xb4\x9b\xe6\x41\xce\xb6\x60\xfa\xf0\x62\x57\xf3\xae\xd5\x56\xfb\xbf\xb2\xc4\xd6\x7b\x74\xaf\x71\xb8\xad\x9e\xed\xa8\x79\x6b\x47\xf4\x19\x97\xb7\xd9\xaf\x63\xb8\x49\xb0\xf9\x14\x93\x3b\x86\x06\x88\x5b\x11\x6e\x73\x33\xa7\xe2\x3e\x8e\xe1\xb9\x58\x8b\xcc\x44\x96\x95\x47\x16\xc7\x4d\x92\x68\x66\x68\x70\x6f\x70\x40\x86\x4d\x8a\xbd\x66\x25\x53\xd4\x5b\x7b\xcc\x80\x53\x4c\x9a\x84\xd8\xca\x63\x66\xe2\xd2\xae\x0f\x8d\xb9\x07\xda\xba\x1e\x32\xf1\x81\x1d\x1c\x62\x1b\xdd\x0d\x1b\xbe\x54\x1e\x59\x94\xdb\xbc\xd5\x0b\x4d\x90\xc4\x90\x8a\xac\xaa\x82\x1e\xf4\xfb\x70\xca\x1d\x84\x8a\xa4\x73\x82\x37\x81\x7b\x10\xa9\x16\xbc\x66\xfb\x4d\x5c\xf5\x9b\xaa\xa4\xd2\x3e\x33\x69\xf8\x1e\xbb\xfb\x60\xc1\xeb\xa4\x3a\x2a\xf6\x3d\xd0\xcc\x80\x14\xf7\x56\xb2\xbd\x5d\xf8\x73\x95\xac\x2f\x93\xe5\x2a\x77\xb1\x02\x13\x8d\x6d\x5a\x1b\xbc\x5f\xd0\x29\xfa\xca\x9f\x15\x46\x3e\xa3\x18\x15\x9c\x22\x17\x95\x2d\xdf\x48\xb5\x0e\x90\xfd\xca\x1f\xc8\x34\x0d\x94\x4d\x0f\x32\x8a\xab\xf9\xe3\x0d\x5e\xb8\x5c\x87\x6c\x49\x8e\x33\xc6\x74\x3c\xd3\x19\xb1\xbb\x5d\xe0\x28\x93\x84\x78\x86\x76\x5f\xd0\xb1\x9e\xb1\x4b\x59\x40\x5f\x59\x83\xb0\x4a\x7d\xa0\x7f\xcc\x8e\xbb\x45\x23\xff\xf8\xd2\x2d\x28\x3d\xab\xbb\x61\xb6\x25\x67\x17\xb7\xcd\xee\x8a\xdd\x2c\xb4\xf8\x6d\xe0\x7f\xd7\x87\x2c\x49\x59\x06\x39\x4f\x9a\x81\xd5\xb8\xaf\x49\xea\x37\xa6\x52\xf6\x87\xe4\xcc\xa9\xc6\x87\xd8\x75\xfe\x4f\xc3\x60\x38\x3b\x47\x5b\xd7\x38\xd9\x57\x4d\x9f\x79\xe4\xad\xca\xf5\x56\xd4\x7e\x1e\x76\x70\x1b\xac\xad\x0b\xc8\xef\x35\xf2\x8e\x77\xe7\x72\x76\x95\xba\x5e\x2b\x03\xcf\xe5\x36\xfb\x9f\x49\xc0\x42\xd9\x83\xf2\xef\xdb\xc4\xb5\x73\x3e\x7d\x3f\x99\xbb\x27\x38\x19\xcd\x20\xcc\x72\xe7\xb9\x71\xfe\x88\x2b\x0e\x33\x40\x53\x26\x23\x3b\x21\x5c\xac\xa3\x05\x55\x16\x1d\x34\xb7\x26\xd4\x38\xdc\x9a\x05\xa9\xf8\x7b\xaa\xaa\x39\xb6\x5d\x57\xcc\xd0\x4a\xd1\x27\xac\xcd\x86\xb7\x1b\x45\x09\xc3\xed\x8a\x3f\x62\x0f\xf9\x7c\x9e\x95\x3d\x9b\x11\xf5\x0b\x47\x1f\x46\x7a\xb2\xc5\x20\xfa\xe3\x8f\xd6\xfa\x44\xe6\xbc\xc1\xc1\x2d\xe0\x51\xf1\x65\x50\xb3\xe4\xda\xa5\x05\x6f\x2d\xca\xa6\x46\x7d\xb4\x96\x34\x53\x8b\x76\xf6\x30\xfc\x92\x86\xbe\x0a\xa2\x32\xe7\xa9\x10\x4b\x8a\xcc\xa2\x64\x9c\xd4\xd3\xe8\xc3\x4a\x28\xc1\xfb\x0d\x06\x92\xb4\x97\x83\x09\x88\xa5\xee\xd6\x7d\x5e\xad\x61\xdf\x75\x99\xf1\x8a\x9c\xb2\x7e\x2d\xaf\xa1\x65\x51\xd2\x98\x6c\xe1\xaa\x6e\x6d\x24\x0d\x71\xde\xc2\x9b\x4e\x0f\x95\x94\xd5\x6d\xd0\xe9\x3b\x76\x0b\xbd\xf1\x70\xf7\xbb\x72\x7b\x9c\x7c\x11\xb4\x6b\xe3\xb5\x51\xd0\x90\x20\x07\x17\xcb\x5a\xa0\xe9\x16\x8b\xf3\x8c\x72\x7f\x7c\x89\xd7\xb5\xd1\x78\xf4\xf3\x10\xfe\x49\xd7\x54\x53\xac\xbc\xea\xb0\x67\x09\x9c\x4c\xe7\x8f\x0b\x7d\xab\x04\xe6\x81\x9a\xaf\x82\xac\x8d\xe3\x95\xf3\x90\x66\xaa\x1e\xe2\x7d\x55\xe1\x15\x5a\xef\x96\xf5\xd3\x43\x92\x5d\xa2\x7e\x2a\x45\x99\xf8\x7f\x0c\x2b\xa2\x1c\xcd\x60\xf2\x7e\x3c\xde\x69\xa6\x03\x58\xd1\x26\x0f\xd8\xed\x5b\xc5\x2e\x6f\xd7\x1a\x40\x5b\x1a\xfe\xbf\x66\xd7\x66\x67\xe9\x94\x81\x56\xf4\x8a\x21\x77\x02\x61\xa2\xd7\x34\x8a\x3c\xf8\x22\xa8\xa6\x63\xf0\x0f\xce\xe8\x25\x24\xa3\xd7\x21\xcc\x55\xaa\xf5\xa6\x73\xd0\xab\x07\x3d\x13\x19\x2e\xf5\xa4\x21\xb7\x71\xa2\x1b\x2d\xa8\xda\xd1\x49\x1d\x94\xa3\x11\xae\x86\x93\xd6\xe3\xa1\x67\x2a\x3f\x25\x40\xad\xbb\x95\x0d\xea\x08\xf9\x67\xb9\xb2\x0f\x12\x9a\xfb\x04\x17\x3a\xe5\xef\x98\xee\x4c\xd2\x13\x49\x6d\x24\xb0\xa6\xc4\x55\x63\x5a\x3c\xe6\xfd\x66\xa9\x02\x7a\xde\x91\x64\x89\xdb\x9a\x1d\xd0\x31\x8b\x5b\x53\x49\xd3\x5b\x7f\x22\x6e\x06\x0b\x84\x81\x43\xd7\x46\xea\x7c\x89\x20\x9c\x5a\x4f\x40\x52\x5b\xca\x5d\x0b\xaf\x03\x4d\x7d\xf9\xaa\xdc\x70\x06\xb7\xc2\x27\xf8\x02\x2f\x1b\xc3\xf1\xf0\x7c\x0e\xdc\xcf\x9e\xe6\x06\x3e\xab\xe6\x05\xec\xbe\x18\x49\x7f\xff\xa1\xde\x6d\x9f\x69\xf4\xaa\xa3\xef\xb3\xf9\x69\xe7\x9b\x9a\x9d\x8a\x69\x11\x47\x1f\x3f\x55\x6f\x92\x47\xc6\xa8\x8c\x0d\x3e\x47\x8b\x9e\x43\x0d\xff\xb3\x39\x97\x34\xeb\xd7\x5d\xf5\x62\x9f\xaf\x0e\x04\x63\x97\xac\xa4\x8f\xa7\x9f\x7c\x56\xa1\x43\x3c\xd6\xdf\x08\x62\x87\x8b\xde\xa1\x6f\x53\x9c\x5c\xc8\x8d\x46\x88\xa6\x99\xed\xdd\x7c\x7e\x01\x2b\xb3\xc7\x2f\x86\x74\xef\xdc\xff\x30\xa4\x7d\x18\xe5\xa5\x8c\x1f\x4e\x4f\xcb\xf7\x4d\xab\x15\xb1\x63\x30\xe9\x6d\x18\x62\x1d\xec\xc0\xcb\xd3\x97\x80\xe0\x32\x89\x93\x20\x5c\x4c\x67\x73\x5a\x3a\x25\x92\x45\x10\xc1\xbf\x66\xd3\x49\x07\xfe\x61\x16\x82\xec\x2b\x73\xa3\x34\x65\x62\xc5\x4e\x7c\x7f\x0a\xaa\x11\x6d\xf4\x77\x12\xbf\x8e\xb8\xba\xc6\xf3\x2b\xe2\x8d\xa1\xb8\x14\x7a\x23\x33\x2d\x3e\xa8\x24\xa7\x67\x01\x0c\x6e\xbb\x6e\xc3\xf9\xce\x8c\x16\xca\xff\xc5\xdc\xc9\xd1\x37\x0e\x01\x70\xcc\xe0\x70\xe3\x33\xe7\x3b\x81\xb1\xa5\x5c\x66\xa5\xc1\x71\xab\xb1\x3a\xbf\x41\xb7\x50\xb9\x2d\xbc\x58\x4c\x2a\x8b\x32\xa8\xcd\x9f\x76\xf0\xb0\x20\x7a\x9d\xa6\xae\xf2\xcf\x64\xf4\xb5\x98\x93\x5a\x91\xf0\xf8\x51\x67\x41\x54\xa8\x4b\x74\x54\xb7\xdf\x98\xd7\xc8\x1b\x8c\xe2\x89\x6c\x95\x53\x8c\x55\xeb\x2a\xf3\xb9\xc0\x33\x9d\x1d\x6a\xda\x27\xe7\x3d\xef\x48\x47\x36\xc0\xe9\x6d\xdd\x7f\x9f\xad\x03\xa5\x57\x41\xea\x22\xbe\x17\x5a\x7d\x3b\x18\x31\xe3\x18\x72\xa9\x8e\x44\xf1\xd7\x28\x1a\x72\x9a\xc0\x7a\xd8\xa2\x1c\xb6\xad\xcf\xc4\xe6\x92\xb4\x03\x55\x95\xc7\xcd\xbf\x41\x14\x78\xb0\xd6\xb4\x9b\x09\x42\xb2\x5c\x4f\xc6\x35\xa2\xab\x46\x16\xa4\x33\xa1\xae\x85\x62\xcd\xf6\x00\x34\xb5\xf7\x99\xe0\xc8\x11\x97\x45\x85\xb1\x31\xc6\xce\xf9\xc5\xba\xe6\xaf\xc1\xb0\xd3\x45\x7c\xf0\x41\x28\x1e\xd5\x62\xfa\x33\x51\xb7\xce\x34\x83\xad\x5b\x83\xee\x31\xbc\x42\x26\x8d\xd6\xff\x0d\x00\x00\xff\xff\x5d\x44\x41\x4e\x24\x1e\x00\x00")

func templatesSearchTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchTmpl,
		"templates/search.tmpl",
	)
}

func templatesSearchTmpl() (*asset, error) {
	bytes, err := templatesSearchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search.tmpl", size: 7716, mode: os.FileMode(420), modTime: time.Unix(1469993477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x38\x12\x7e\xb6\xfe\x8a\x39\x1f\xae\x90\x0a\x9f\x1c\x1c\x7a\xfb\x10\x20\x0f\x4d\xed\xb4\xd9\x4d\x93\x6c\xed\xa2\x0f\x41\xb0\xa5\xac\xb1\xcd\x46\x26\x15\x92\x8a\x9b\x0d\xf2\xbf\xef\x0c\x29\xd9\x72\x6a\x3b\xd9\x62\xf7\x61\x1b\x53\xf3\xf3\xfb\x3e\xce\xb0\x14\x93\x1b\x31\x43\x78\x78\x48\x2f\xc3\x9f\xe7\x62\x81\x8f\x8f\x51\xd4\xef\xc3\xfb\xe1\xf9\xf0\xd3\xdb\xf1\x70\x00\xef\x2e\x06\xc3\x1e\x0c\x07\xa7\xe3\x11\x7c\x39\x3d\x3b\x83\xe3\x21\x9c\x5d\x8c\xc6\x64\xc5\x86\x33\x54\x68\x84\xc3\x1c\xa6\x46\x2f\x7e\x08\xd6\xa7\x83\xf1\x7d\xd9\x84\x26\x87\xca\x4a\x35\x83\xb9\x73\xe5\x61\xbf\x3f\x93\x6e\x5e\x65\xe9\x44\x2f\xfa\x99\x91\x42\x59\x27\xcc\x0d\xf6\x67\xfa\xbf\x19\xce\xd0\xf5\xfd\xff\xa3\x48\x2e\x4a\x6d\x1c\xc4\x51\xa7\x9b\x0b\x27\x32\x61\xb1\x6f\x6f\x8b\x2e\xfd\x46\x35\xd1\x39\x45\xec\x7f\xb3\x5a\xf1\xc1\x74\xe1\xf8\x1f\xa9\xfb\x52\x57\x4e\x7a\x23\x45\xa1\x38\x63\x37\x8a\x3a\xf6\x16\xba\xad\xb4\x85\x50\x8a\x62\x55\xd2\x18\x24\xdb\xc4\x77\xbf\x51\xf4\xe7\x92\x72\xe2\x27\xbc\xad\xd0\x3a\xc8\x71\x2a\x15\x5a\x10\x60\xd1\x81\x9e\x42\x29\x0c\x99\x39\x34\x16\xa6\xda\xf8\x0e\xd9\x81\x9b\xdc\x08\x93\x02\x9c\x3a\x98\x08\x05\x19\x92\x2f\x75\x5b\xc8\x3f\x09\x36\xa1\x72\x8a\x61\x2d\xe6\xec\x9b\xa1\x5b\x22\x2a\x36\xb8\x93\x13\xce\x63\xe1\xd7\xd1\xc5\x79\x0f\xb4\x21\xe8\xc8\xde\xe9\x15\xe6\x54\xc4\xe8\xf7\x33\x20\xd0\x1c\x2e\x50\xb9\x34\x72\x94\x6e\x5f\xf5\xd6\x99\x6a\xe2\xe0\x21\xea\x9c\x0e\x40\x2a\xf7\xcb\x1b\xf8\xca\xc0\x1d\x76\x65\xde\xfd\x1a\x75\x82\xb5\x85\x85\x28\xaf\x36\xc2\x9c\x48\x2c\xf2\x6b\xf2\x40\x33\x15\x13\x7c\x78\x6c\xfc\xaa\xe0\x41\xce\x41\x38\xe7\xb8\xdc\x93\x7f\x62\xd0\xc7\x17\xa0\x70\x19\x80\x42\x30\xf5\x47\x82\x0f\xc6\x73\x02\x2e\x9a\x56\x6a\x02\x71\x05\xaf\x77\x87\x4a\xf6\x67\x8a\x65\x1e\xfa\x4b\xf6\x05\x61\x20\x0c\xba\xca\x28\x78\xb5\xdb\x8a\x8c\x08\xae\x43\x90\x79\x2f\xea\x3c\xd6\x7d\xbe\xcd\xf3\x60\x04\x92\xdb\x99\x68\x75\x87\x4a\x92\x1a\x11\x48\x0d\x73\x9d\xfb\x76\x44\xce\xda\xac\x1b\xb5\xcc\x9d\x9b\x93\x7d\xdd\x31\x49\xe2\xdd\x5c\x48\x25\xb2\x02\xd3\x97\x35\xbd\x4a\x1b\x4f\x99\x11\xf8\x91\xa4\x1e\xdc\x89\xa2\x42\x68\x71\xf5\x2c\x06\x55\x5a\x13\x7f\xe5\xa3\x5e\xc3\x51\x08\x12\xad\xe0\xa9\xea\xb6\xdf\xd7\xd2\x0b\xf6\xac\xbe\x60\x40\xbd\xcd\xb1\x56\xa3\xe1\x96\xbd\xac\x0b\x4a\x3f\xd7\x45\x8e\x26\xc4\xb3\x5e\xc6\x74\x05\xd0\x18\xba\x2b\x2f\xea\xf8\x87\x8c\x71\x02\x71\x48\xd2\x83\xab\xb6\x24\x7b\x21\x6c\xc2\x1d\xd1\x74\x80\xc3\x23\xb0\xb7\x29\x91\x37\x6a\x2e\xc8\x71\x25\xb9\x18\x3e\xbb\x5c\xd7\x76\xa2\xcd\x42\xb8\x98\x6c\x07\xba\x28\x84\x49\xf8\x7b\x8d\x72\x97\x4b\x63\x7e\x42\x6d\x5d\x9a\x0f\x1d\x26\x76\xda\x86\x9a\x12\x19\xa1\x68\x94\xae\x70\xe4\x12\x7c\x0d\x5c\x42\x91\x8e\xd0\x05\xbe\xd2\x41\xe6\x49\xe2\x68\x71\x52\xfb\x27\xac\xaa\xa8\x65\xfe\x65\x8e\x06\xb9\x9e\xe1\xed\x03\x5f\xcc\x43\x0a\x7c\x3a\x78\x4c\xd6\x74\xb0\xd5\x58\x8f\x6e\x8b\x38\xa9\x89\x19\x7e\xc7\x49\xd5\xa0\x04\x4b\x59\x14\xe0\xc4\x0d\x8f\x08\xb6\x1d\x1c\xb3\x42\x15\x4e\x9c\xd4\xca\x73\x83\xc1\x3e\xe8\x31\xe8\xf3\x65\x7c\x6c\x24\x8a\xf3\x0c\x5e\x87\x04\x49\x40\xbf\x06\xbf\xb7\x22\x9c\x4e\x19\xa0\x2a\xdd\x42\x24\x35\x24\xa7\xde\xe2\x5f\x47\xa0\x64\xe1\x61\xab\x5b\xa4\xd3\x80\xcb\x1f\x21\xc6\x11\xe4\x59\xca\xc9\xe3\x56\xf8\x16\x24\x6c\xbf\x6f\x04\x7d\xa0\xae\x0b\x22\x9b\x7b\x6c\x34\x4b\x4a\xfc\x30\x1e\x5f\xc2\x3c\x7c\x03\x0f\x40\x3d\xc5\x77\x63\x60\x53\x9e\xe4\x4d\x8c\xff\x1d\x1c\x78\x40\x59\xff\x06\x6d\x55\x38\xcb\xee\x04\xb3\xad\x26\x34\xc1\x09\x82\x37\x07\x6f\x80\xfa\x54\xda\x11\x1d\x97\xb4\x3b\xf9\xe8\x80\x4d\x32\x91\xd7\xe3\xfd\xff\xe1\x40\xa8\x7b\xef\x4d\xd1\x4c\x00\xb4\x1e\x0c\xcf\x36\xb5\x41\x05\x2f\xbb\xb4\xdd\xf1\x7a\xd0\x71\xb4\x78\x19\x2c\x3e\xa1\x2d\xb5\xb2\xf8\xc5\x48\xba\x45\x3d\x30\xf0\xba\x3e\xaf\xc9\x66\x3e\xa8\x72\x93\x7e\x0c\x33\x8d\x68\xea\x72\x03\x5d\xff\xa5\xb3\x4c\xbd\xe7\x07\x14\x74\x8d\x62\xef\xca\x77\xad\xb2\xe7\xda\x9d\xe8\x4a\xe5\x09\x5b\x85\xc4\xf4\x17\xb3\xd9\xc9\x56\x92\x08\xfb\x99\x92\x89\xfc\x6d\x51\xc4\x26\x3d\xd6\xf9\x3d\x33\xba\x45\x14\xbb\x53\x1d\x8b\xbc\x29\x97\xed\x68\xfd\xa7\x27\x25\x4d\x07\x17\x2f\x7b\xd0\x3d\xd7\x4f\xb7\x8c\x54\x35\x55\xe1\x67\x46\x39\xbb\x5b\xca\xbc\x13\xb4\x6f\xcd\x1e\x15\x90\x4d\x90\x25\xef\xc1\xf4\xb3\x5a\x08\x63\xe7\xa2\x88\xa9\xbf\x57\x95\xf9\xe7\xda\x98\xfa\x3e\x86\xfe\x6e\xe5\xd8\x3c\x1c\xd6\x5b\xa5\xe9\xe4\x10\xfe\x63\xbb\x1e\xdb\xd4\x1b\xc7\xc9\x96\xae\x42\xc5\x95\x49\x9f\xde\xe2\xbf\x5d\xef\x29\xcf\x5d\x25\x8a\x11\x3d\x54\xd0\xf8\x8c\x7b\x0a\x0f\xd3\xe6\x27\x8b\xde\x59\xc3\xc5\x6f\x6c\xfd\x34\xa3\xbe\xf1\x53\x7a\x15\xa4\xd9\xd8\x1f\x03\x41\x63\xfc\x4e\x22\x58\x94\x85\xdf\x08\xd6\x5f\x04\xcb\x4f\x51\x4d\x4f\xc1\x59\xaa\xcd\xac\x5f\xde\xcc\xfa\xab\x77\xe5\xbf\xd9\xa1\xf6\xc5\xf5\xce\xda\x37\x22\x5b\x99\x78\x59\x5d\x5d\x67\xf7\x0e\x37\xb6\x93\x5f\x5f\x92\x56\x42\xce\x17\x61\x41\x83\x3a\xe6\x27\x57\x38\x6f\xef\xb4\x66\xdf\xdc\xe0\xfd\x73\xdb\x66\x75\xaf\xc8\x36\xdd\x28\x61\x07\xb7\xf5\x40\xa0\xdf\xbd\x30\x6d\x03\xdc\xad\xe2\xea\x82\x62\x9b\xac\x9f\x04\xde\x28\x0c\xba\x50\xfb\xb6\xb2\x39\xfe\xea\x69\x78\x08\xad\x90\x3d\xfe\xe2\x77\x9a\xff\x8f\x17\x5b\xaf\x89\xe9\xcb\xf1\xd7\xa9\x2e\x3f\x0e\x79\x9a\x1d\xb7\xba\x64\x3f\xc5\xe1\xca\x1b\x5f\xf8\xf2\xd8\x48\x17\x67\x10\x78\x6c\xed\x39\x9e\x11\x72\x07\x02\xd4\x50\x4d\xc7\x96\xf9\x20\x5f\xb6\xf9\x18\x1c\xc2\x5d\x5e\x31\x60\xd7\x69\x1c\x1e\xb4\x51\x48\xfc\x0d\x5a\xc2\xd9\xff\x56\xdf\x27\x22\x0a\xde\xf0\x44\x19\x76\x88\xd0\x57\xc7\x49\xcb\x2d\x0f\xce\xd5\x58\x29\xd3\x4d\xc4\x02\x5e\x31\x65\x4d\x9e\x91\x60\xa3\xbe\x4e\xe7\xdb\x55\xf9\x44\x6a\x6b\x95\x13\x94\x6b\x99\x50\x08\x52\xc5\x5f\x01\x00\x00\xff\xff\x96\xd6\x30\x09\xc4\x0e\x00\x00")

func templatesUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUpdateTmpl,
		"templates/update.tmpl",
	)
}

func templatesUpdateTmpl() (*asset, error) {
	bytes, err := templatesUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/update.tmpl", size: 3780, mode: os.FileMode(420), modTime: time.Unix(1470001585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/create.tmpl": templatesCreateTmpl,
	"templates/enums.tmpl": templatesEnumsTmpl,
	"templates/fields.tmpl": templatesFieldsTmpl,
	"templates/search.tmpl": templatesSearchTmpl,
	"templates/update.tmpl": templatesUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"create.tmpl": &bintree{templatesCreateTmpl, map[string]*bintree{}},
		"enums.tmpl": &bintree{templatesEnumsTmpl, map[string]*bintree{}},
		"fields.tmpl": &bintree{templatesFieldsTmpl, map[string]*bintree{}},
		"search.tmpl": &bintree{templatesSearchTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templatesUpdateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

