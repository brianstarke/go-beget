// Code generated by go-bindata.
// sources:
// templates/create_repo.tmpl
// templates/search_repo.tmpl
// templates/search_request.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCreate_repoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x18\x4c\x28\x4e\x70\xad\x4b\xe9\x61\xa1\x87\xed\xc6\x5b\x02\x4b\x96\x66\xb3\x87\x52\x7a\x90\xed\xb1\xa3\xae\x2d\xa5\xb2\x4c\xb7\x18\xff\xf7\x8e\x64\x87\xdd\x50\xa7\xb4\x27\x83\xa5\xf7\xe6\x7b\x33\xa3\xa3\xc8\x9f\x44\x85\x90\x1b\x14\x16\x19\x5f\xb1\xe0\x53\xba\x4d\x77\xd7\xfb\x74\x0d\x37\xf7\xeb\x34\x86\x2f\xf7\x8f\x3b\x48\xd7\x9b\xfd\x03\x5c\xef\x52\xb8\x7d\xdc\x6f\xee\x52\xc6\x82\x0a\x15\x1a\x12\x15\x50\x1a\xdd\x40\xdf\x27\xfb\x5f\x47\xdc\x8a\x06\x87\x81\x05\x5d\x2b\x55\x05\x07\x6b\x8f\x57\x9c\x57\xd2\x1e\xba\x2c\xc9\x75\xc3\x33\x23\x85\x6a\xad\x30\x4f\xc8\x2b\xfd\x36\xc3\x0a\x2d\x9f\xac\xb4\xe1\x9e\x43\x1b\xb6\xe2\x8c\xc9\xe6\xa8\x8d\x85\x88\x05\xe1\x2b\x83\xef\x8d\x96\x46\x2b\xde\xfe\xa8\x9f\xc3\xf3\xa3\x59\xef\xc9\x31\x24\x62\x4b\x7c\x2d\x84\x13\xe9\xc6\xdb\x0f\x43\xc8\x96\x8c\x71\x7e\x1e\xe0\x66\x54\x41\x81\xa5\x54\x24\xb2\x07\x04\xa9\x2c\x9a\x52\xe4\x08\x25\x9d\xd8\x83\x6c\xe1\x84\xeb\x9c\xe7\x0d\x5e\x44\x3d\x0b\xfc\x4f\x8c\x72\xf0\x24\xc9\x99\x60\x09\x11\xdd\x7d\xff\x2e\x06\x34\x46\x9b\x25\x1b\x3c\xd5\xc3\xe7\xbb\x79\xdf\xe6\x58\x63\x83\xca\xb6\x20\xdc\xa5\x73\x94\x4b\xaa\xd6\x9a\x2e\xb7\x0e\xa5\xc8\x60\xe5\x5a\x98\xac\x3f\x4e\x95\xb6\xf8\xf3\x92\xcc\xa0\xed\x8c\x3a\x55\xca\x44\x4b\x43\x9f\xbb\xc8\xca\x4e\xe5\x7f\x31\x8a\x5e\x55\x5d\xce\xf7\x8b\xd0\xc6\x6a\xf0\xe6\x82\x49\x5f\x64\x57\x45\x36\x38\xea\xbe\x5f\xa8\xae\xb9\x95\x58\x17\x2d\x5c\x7d\x80\x1a\x15\x24\xfe\x9a\xc8\x6a\x1c\xff\x0f\x63\xba\xb1\xf5\x34\x8e\x16\x8d\xef\xd9\x99\x35\x25\xcc\xb5\x29\xe8\x18\xac\xf6\xc3\x2e\x9c\x07\x05\x1d\x23\x45\x06\x56\x17\x70\x96\xf0\x3f\x53\x75\xf9\x72\x5d\x77\x8d\xf2\xc0\x5f\xbf\xd1\x44\xe8\xa1\xd0\xdf\xa0\xef\x8d\x50\xf4\x14\x17\x32\x86\xc5\xb3\x3b\xfd\x33\x0a\xed\xee\x82\x9a\x97\x8d\xe6\x61\xec\x65\xa8\x0a\xf7\xe2\x28\xe7\xa9\x75\xd3\x2e\x24\x1b\x9f\x36\x32\x49\x91\x51\xc7\xe3\x71\xf5\x9d\xdf\x49\x0f\x13\x4b\x0c\xff\x52\x3d\x4f\x7c\xf9\x51\xdc\xf7\xb2\x84\xda\x92\x00\x5e\x86\x30\x0c\xf1\xc4\x33\x7d\xdc\x1a\xff\x0e\x00\x00\xff\xff\x0d\xa1\x76\x38\x64\x04\x00\x00")

func templatesCreate_repoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreate_repoTmpl,
		"templates/create_repo.tmpl",
	)
}

func templatesCreate_repoTmpl() (*asset, error) {
	bytes, err := templatesCreate_repoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create_repo.tmpl", size: 1124, mode: os.FileMode(420), modTime: time.Unix(1458055623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearch_repoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\x3f\x03\xbf\xc2\x0e\x32\xf9\x1e\xa0\x87\xae\xf1\x8a\x02\x45\x8b\x25\xe9\x61\x18\x76\x90\x1d\xda\xd1\x1a\x4b\xa9\x24\xf7\x0f\x02\x7f\xf7\x51\xb2\x13\x24\x43\x92\xd3\x4e\x86\x45\xf2\xbd\xc7\x47\x51\x1b\x51\xbe\x88\x1a\xc1\xa2\x30\xe5\x8a\x65\x23\x16\xdd\xe5\x8f\xf9\xec\x66\x91\x4f\xe1\xf6\x69\x9a\x8f\xe1\xc7\xd3\xf3\x0c\xf2\xe9\xfd\x62\x0e\x37\xb3\x1c\xbe\x3d\x2f\xee\x1f\x72\xc6\xa2\x1a\x15\x1a\xe1\x70\x09\x95\xd1\x0d\x6c\xb7\x7c\xf1\xb9\xc1\x47\xd1\x60\xd7\xb1\xa8\xb5\x52\xd5\xb0\x72\x6e\x33\xc9\xb2\x5a\xba\x55\x5b\xf0\x52\x37\x59\x61\xa4\x50\xd6\x09\xf3\x82\x59\xad\xbf\x14\x58\xa3\xcb\x06\x28\x6d\xb2\x5e\x07\x1a\x36\xca\x18\x93\xcd\x46\x1b\x07\x09\x8b\xe2\xaa\x71\x31\x7d\xac\x33\x04\x6b\x63\xa2\x8f\x0f\x40\x7f\x37\x5a\x1a\xad\x32\xfb\xba\xfe\x88\x8f\x43\x27\xf9\x76\x2c\x84\x03\xe0\x48\xb5\x85\x78\xd0\x7f\x1f\x38\xbb\x2e\x66\x29\x63\x59\x76\xdc\xd6\x3c\xd4\xcd\x70\xa3\x41\x5a\x70\x2b\x04\xa9\x1c\x9a\x4a\x94\xc8\x3c\xcc\xf9\xec\x5d\x1a\x6c\x59\xd4\x9f\x27\x76\x08\xbf\xb6\x68\xdd\xe9\xca\x10\x4a\x21\xf9\xf9\x2b\x88\xe4\x47\x49\x63\x40\x63\xb4\x49\x59\x17\x84\xce\xbf\x3f\x9c\x65\x6f\x36\x6b\x6c\x50\x39\x0b\xc2\xe7\x41\x21\x2c\x8d\x6d\xef\x75\x90\x7e\xa1\x9e\x5c\x6f\x4b\xe7\xa5\x2f\x0b\x18\x79\x93\xf9\xf4\xeb\x40\xfb\x88\xef\x17\x2a\x0d\xba\xd6\x28\x4f\x5b\x6a\x55\xc9\xba\x35\xc4\x6b\x7c\xa4\xd2\x06\x3e\x75\x0b\xac\x6a\x55\x79\x19\x25\x39\x60\x4d\xcf\x5a\x4c\xea\x7a\x36\xb8\x3a\x0f\xb5\x5d\x16\x93\x65\xd1\xed\x2c\x0b\xe7\x5e\xda\x1b\x9a\x60\xce\xf9\x29\xd0\x08\xc1\xe9\xe0\x9e\x50\x4b\xc0\x0f\x2c\x5b\x47\xf7\x46\xba\xbe\x83\xc4\xc0\xe8\x3c\x6f\x0a\xff\x78\xe8\x7d\xbb\xb6\x5d\x93\xec\xc9\x35\x9c\xcc\xdd\x52\x97\x11\xf9\x36\x77\x66\x0c\x6f\x62\x4d\xb8\xa1\xdc\x17\xec\x66\xcf\xef\x86\x2d\x9e\xe3\x1a\x4b\x47\x1d\x24\x57\x47\x1a\x69\x0b\x22\x59\x85\xb2\xff\xae\x41\xc9\xb5\x67\xde\x39\x4d\xbf\x63\xa0\xd5\xe4\xb9\x17\x55\x25\x71\xf8\xc2\xb0\xce\xfe\x01\xf0\x7e\xf9\x51\x5f\x30\x76\x02\xff\xdb\x38\x08\xeb\x61\x92\x34\x65\x91\x97\xee\x39\xaf\xc1\xf0\x65\xc1\x7b\x75\xc9\xd5\xd0\xf2\x18\x8e\xdb\xe2\x64\xd6\x7e\xc5\xb6\x5d\xca\x39\x3f\xad\x9b\x4e\x86\x27\x84\xdf\x6a\xe5\x84\x54\x36\x39\x20\x1e\x43\xac\xe8\xd2\xea\x77\xeb\xc7\xdd\x93\x91\x55\x2e\x0e\x7e\xef\xdb\xde\xab\x20\x58\x3a\xee\x7a\xb9\x7f\x07\x09\x97\xee\xd9\x9f\x00\x00\x00\xff\xff\x79\xd9\x68\x6b\x61\x05\x00\x00")

func templatesSearch_repoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_repoTmpl,
		"templates/search_repo.tmpl",
	)
}

func templatesSearch_repoTmpl() (*asset, error) {
	bytes, err := templatesSearch_repoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_repo.tmpl", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1457110640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearch_requestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdf\x6f\xdb\xb6\x13\x7f\x16\xff\x8a\x83\xbe\x2d\x6a\x07\xfe\x4a\x7b\x0e\x90\x87\xb6\x51\xba\x0c\x69\x83\xc5\xce\x86\xa2\x28\x16\x4a\xa2\x6c\xad\xb2\xe4\x92\xb4\xdb\x4c\xf0\xff\xbe\x3b\x92\xfa\x69\x27\x4d\xb6\x3d\x85\xe2\xf1\x7e\x7d\xee\xee\x73\xce\x86\x27\x5f\xf8\x52\x80\x12\x5c\x26\x2b\x16\x9e\x30\xef\x5d\xf4\x21\xba\x79\xbd\x88\xce\xe1\xed\xf5\x79\x34\x83\x8f\xd7\xb7\x37\x10\x9d\x5f\x2e\xe6\xf0\xfa\x26\x82\x8b\xdb\xc5\xe5\x55\xc4\x98\xb7\x14\xa5\x90\x5c\x8b\x14\x32\x59\xad\xa1\xae\x83\xc5\xfd\x46\x7c\xe0\x6b\xb1\xdf\x33\x6f\xab\xf2\x72\x09\x2b\xad\x37\xa7\x61\xb8\xcc\xf5\x6a\x1b\x07\x49\xb5\x0e\x63\x99\xf3\x52\x69\x2e\xbf\x88\x70\x59\xfd\x3f\x16\x4b\xa1\x43\x67\xaa\x92\xa1\x8d\x43\x48\x76\x12\x32\x96\xaf\x37\x95\xd4\x30\x61\x9e\x9f\xad\xb5\x8f\x7f\x94\x96\x68\x56\xf9\xe8\xde\xff\x91\xd1\xc6\x94\xcf\xa6\x8c\xb1\x30\x1c\x46\x78\x91\x8b\x22\x85\x5c\x01\x87\xcc\x1c\xbf\xa1\xb9\xbc\x04\xbd\x12\xc3\x87\x80\x3e\xb7\x89\x46\x03\x7a\xc5\xb5\xd1\x88\x0b\x01\xba\x82\x58\xa0\x6a\xa1\x85\x44\x08\xaa\x72\x06\x0a\x83\x75\xc7\x4a\x82\x14\x7a\x2b\x4b\x91\x06\x4c\xa3\xad\xa3\xce\x4b\x6d\xe2\x8a\xca\xed\xfa\x15\xa2\x88\x4a\x2b\x51\x6c\xb2\x6d\x51\x0a\xa5\x58\x52\x61\x4a\x30\xa9\xeb\x17\xda\x29\xc2\xe9\x19\xf4\x41\xae\x6b\xc9\x4b\x2c\xde\x8b\x7c\x06\x2f\xbe\x1b\xe9\xdc\x24\x4d\x11\x1a\x1f\x6a\xbf\xef\xe9\x9b\x8f\xef\x81\xcb\xab\xae\xf3\x0c\xc4\x57\xd4\x86\x9f\x46\xcf\x6c\x7c\x67\x90\x57\x9a\xd7\xb5\x28\x53\xe3\xcc\xfc\x9d\x9a\x90\xdf\x73\xa9\x56\xbc\x58\x88\xef\x88\xc8\x7a\x53\x88\xb5\x28\xb5\x32\xe5\x56\x54\xef\xaa\xc0\xc0\x82\x4a\x2e\xc3\xcd\x97\x65\x28\xca\xa4\x4a\xb1\x6e\xe1\xff\x48\xc1\xe9\x62\x8d\xb3\x6d\x99\xc0\x44\x1d\xc1\x66\xda\xf7\x30\x99\xc2\xe4\xd3\xe7\xf8\x5e\x8b\x19\x08\x29\x2b\x39\x85\x9a\x79\x3b\x2e\x21\xe5\x9a\x83\xed\x09\xec\x08\x85\x25\x4c\x56\xa0\x48\xfa\x24\x68\x12\xae\xa8\x30\xc7\xf1\x39\x65\x9e\x67\xec\x9f\x81\x6f\xae\x7f\x99\x5f\x7f\xb0\x22\x9f\xec\x5b\x54\xbc\x54\x64\x7c\x5b\x68\x7a\x6d\x2b\x0e\x65\x5e\xcc\x00\xfb\x35\x88\x28\xd6\x6c\xe2\xdf\x96\x4d\xc7\xac\x6d\x52\x70\xf7\x72\x77\x07\xd4\x6c\xd8\x44\x98\x96\xf2\xb1\x79\xa6\xcc\x43\x73\xce\x86\x4d\x77\x42\xfe\xa7\x33\xb2\xc8\xf6\x06\xf7\xdb\x72\xfd\x2f\x90\x6f\xb5\x7b\xd8\x9f\x1c\x03\x7f\xe0\x66\x12\xbb\x70\xa6\x16\x7d\x82\x17\x31\x27\x4c\xdd\x38\x06\x0b\x99\xaf\x27\xf6\x63\x12\x63\xc0\x77\xfe\xdd\xb4\x57\x10\x2d\x9f\x57\x92\x03\xbc\x09\xdd\x13\x85\x95\x78\xa8\x58\x8f\x16\xe4\xf1\x5a\xbc\x7a\xa9\x5e\xd1\x28\x56\xf0\xc0\x9c\x52\x71\xb4\x1c\x94\xa7\x2b\xc8\x79\x6c\xde\x98\xe9\xb4\x42\x65\x28\xa4\xa4\x8b\x2a\x33\x67\xcb\x2f\xe8\x60\x8b\xb9\x39\x8a\x99\xff\x7a\x05\x5f\xb7\x42\xde\x3f\x3a\x04\x3d\xeb\x38\x04\x16\x60\x03\xff\x7f\xde\xe9\x2e\x31\x8b\xfc\x79\x7c\xd8\xe7\x5d\xf2\xbe\x6f\x72\x3f\x61\x83\x88\xad\xcf\x1b\x81\x49\x21\x6b\x61\x11\x72\x24\x31\x24\x57\x25\x34\xe1\xb0\xe1\x12\x9f\x21\x57\x2a\xe2\x39\x66\xb9\x99\xb2\x21\xd6\x1b\x18\x0a\x00\x2e\x35\x24\xbc\x24\x7e\x55\x02\x99\xbd\xc8\xff\x42\x5a\xe5\x65\x8a\x56\x94\x12\x29\x8b\x85\xfe\x26\x44\x49\xd2\x5d\x9e\x90\x1b\x05\xd4\x2d\x86\x77\x11\x64\x03\x76\xb3\x9e\x30\x06\x02\x1b\xb7\x83\x36\xb3\x12\xd0\x6a\x39\x2c\xf5\x30\x7e\xcb\xf9\x06\x6a\xb7\x45\x82\xc1\x03\x8b\x2b\xf3\x2e\x0c\xff\x2b\x1c\x90\x23\xc6\xac\x10\xee\xfe\x54\x55\x79\xea\xdb\x55\xa1\xfc\x3b\xe6\x5d\xcb\x54\xc8\x37\xf7\xc3\x00\x9a\x4b\xcf\x73\x0a\x95\xbd\x20\x05\xeb\x6e\xec\xc5\xb2\xb4\xd7\xda\xa7\x37\xf8\xfa\xc1\xe2\xb8\x78\xdc\xce\x33\x67\xb5\x11\x49\x9e\xe5\x09\x01\x36\x5c\xe0\x8f\x80\xe4\xec\x74\x18\xd9\x40\x8e\xc4\xd6\x0f\x8d\xf2\xf8\x8d\x17\x5b\x1a\x01\x54\xcf\x78\x22\xea\x7d\xf3\x62\x47\x02\x03\xcd\xc6\xfe\x10\x80\x16\x77\xeb\xad\xbd\x6f\xc0\x71\xdf\xa4\xf3\xb6\x2a\xd3\x5c\xe7\x55\x39\x56\xea\x04\x4e\x2b\x69\x2e\x8e\xc3\xd4\x94\xc0\x20\x44\xdb\x1c\xd2\x5c\x8a\x44\xe7\x3b\x64\x0c\xb7\xfc\x9f\x89\x58\x63\xf2\x1f\x80\x75\x2e\x54\x82\xc3\x47\x43\x12\x57\x55\xd1\xc8\x53\xbc\x76\xe1\x87\x70\xd9\x6c\x00\x38\xde\xa7\x1d\xd6\xe6\xf9\x3b\xa1\x17\x44\x0b\x07\x74\x45\x8b\x26\x26\x8e\xd0\x86\x1e\x89\xbd\x1a\x62\x92\xa3\x15\x31\xb0\x3f\x1d\x98\x1c\x70\x54\xc7\x28\x41\xfb\x80\x28\x65\xdf\x44\xd2\xcc\x4e\x3f\x0e\x9a\xd4\xdf\x7f\x8e\xf0\x67\x66\x52\x70\x9c\x64\xf5\xf4\x28\x9c\x39\x8c\xe1\xd3\xe7\x51\x1f\x50\x38\x6e\xfc\x88\x1f\x0f\xe4\x35\xc6\xe4\x11\x11\xfd\x81\x8b\x9b\x5e\x58\x46\x55\x8d\xdc\xf0\xac\xb3\x60\xd6\xde\x48\x1d\x85\xb6\xac\xa7\x90\x05\xe6\x30\xa3\x2b\xd3\xed\x74\x65\x0e\xe6\xaa\x69\x63\xba\x6d\xce\x46\xd0\xb6\x2a\x49\xda\x0f\x12\xed\x5b\xd7\xb4\x00\xf9\x66\x83\x3d\x31\x71\x17\x33\x37\xc7\x66\x39\xb5\x90\x3b\x61\x87\x74\xd3\x84\x63\xa4\xaf\x6f\xce\xa3\x1b\x78\xf3\xf1\xf9\x60\x3b\x8b\x54\xf0\x06\x8b\x96\xd4\xda\x38\xc6\x22\xc2\xc9\xc1\xa4\xda\xcb\x0e\xaf\xae\xdf\x07\xf2\xee\x7a\x46\x59\xb6\x49\x5d\xe5\xeb\x5c\x1f\xa4\x74\x75\xf9\xfe\x72\xe1\xf2\x79\x7a\x3a\xc6\x16\x26\x83\xd3\xd2\x8f\x5f\x06\x46\xd0\x03\x32\xcb\x68\x9f\x1d\xe0\x78\x71\x31\x8f\x9e\xef\xd5\x5a\x3b\xe6\xd6\x4a\x9c\xdf\xd7\x69\xea\xda\x98\xa7\x29\x31\x53\x7f\x40\x9e\xe8\xad\xb5\x31\xc9\x1e\xa0\x9f\x19\xec\xc6\xe4\x8c\xeb\xf4\x07\x6c\x3c\x83\xe4\x87\xdc\x3b\xa5\xe1\xa3\xa9\x79\x70\x93\xf4\xfa\x22\x6b\x9a\xc1\xcd\xce\xae\x99\x9c\x6e\x70\xaa\xde\xd8\xf4\xa6\x26\xe9\xcd\x0c\x8e\x4c\x6f\x76\xdb\xa1\xe9\xee\x70\x6e\xa6\x0e\xdd\x79\x37\x1e\x08\xb9\xad\xe9\x68\x2e\x9e\x88\x71\x67\xe9\x11\x90\x73\x35\xa2\x75\xf3\xbf\x4c\xd7\xee\x70\x76\x74\x7f\x1c\x83\xa8\x3f\x2f\x7d\xb3\xc3\x31\x71\x3f\x1d\xc6\x2d\x3b\x8f\xae\xa2\xb7\x0b\x6b\xec\x59\x24\x4b\xef\x2d\xc7\xb6\x4c\x6f\x8d\x38\x66\x35\xb7\x8f\x11\xaa\x79\x6b\xf9\xd4\x1c\x7b\x9c\x46\xdf\xa8\x10\x0c\x7e\xf6\x8e\xb9\xcd\x04\xbc\x67\x7f\x07\x00\x00\xff\xff\x59\xfb\x79\xde\xb9\x10\x00\x00")

func templatesSearch_requestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_requestTmpl,
		"templates/search_request.tmpl",
	)
}

func templatesSearch_requestTmpl() (*asset, error) {
	bytes, err := templatesSearch_requestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_request.tmpl", size: 4281, mode: os.FileMode(420), modTime: time.Unix(1459861773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/create_repo.tmpl": templatesCreate_repoTmpl,
	"templates/search_repo.tmpl": templatesSearch_repoTmpl,
	"templates/search_request.tmpl": templatesSearch_requestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"create_repo.tmpl": &bintree{templatesCreate_repoTmpl, map[string]*bintree{}},
		"search_repo.tmpl": &bintree{templatesSearch_repoTmpl, map[string]*bintree{}},
		"search_request.tmpl": &bintree{templatesSearch_requestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

