// Code generated by go-bindata.
// sources:
// templates/search_request.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSearch_requestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\x83\xbe\x2d\x2a\x07\xfe\x4a\x7b\x0e\x90\x87\xae\x76\x8b\x0c\x59\x82\x25\xce\x80\xa1\x28\x6a\x4a\xa2\x6c\x2e\xb6\xe8\x92\xb4\x9b\x4c\xf0\xff\xbe\x3b\x92\xfa\x61\xc7\x4e\xe3\x6d\x4f\xa6\xee\xc8\xfb\xf1\xb9\xbb\xcf\x79\xc5\xf2\x07\x36\xe3\xa0\x39\x53\xf9\x3c\x4c\xcf\xc2\xe0\xd3\xf8\x7a\x7c\xfb\x7e\x32\x1e\xc1\x87\x9b\xd1\x78\x08\x7f\xdc\xdc\xdf\xc2\x78\x74\x39\xb9\x83\xf7\xb7\x63\xf8\x78\x3f\xb9\xbc\x1a\x87\x61\x30\xe3\x15\x57\xcc\xf0\x02\x4a\x25\x97\x50\xd7\xc9\xe4\x69\xc5\xaf\xd9\x92\x6f\xb7\x61\xb0\xd6\xa2\x9a\xc1\xdc\x98\xd5\x79\x9a\xce\x84\x99\xaf\xb3\x24\x97\xcb\x34\x53\x82\x55\xda\x30\xf5\xc0\xd3\x99\xfc\x7f\xc6\x67\xdc\x18\xae\x52\x6f\x4d\xaa\xd4\x85\xc2\x55\x78\x96\x86\xa1\x58\xae\xa4\x32\x10\x87\x41\x54\x2e\x4d\x84\x3f\xda\x28\xb4\xac\x23\x8c\x20\x7a\x85\xdd\xc6\x5a\x14\x0e\x42\x4a\x6f\x27\xcc\x8f\x82\x2f\x0a\x10\x1a\x18\x94\xf6\xf8\x1d\x0d\x8a\x0a\xcc\x9c\xef\xe6\x03\xe8\x75\x9d\x9b\xd0\xcc\x99\xb1\xf7\xb3\x05\x07\x23\x21\xe3\xf8\x70\x81\x7e\x10\x05\x59\x0d\x41\x63\xb0\xfe\x28\x15\x28\x6e\xd6\xaa\xe2\x45\x42\xa9\x18\x34\x06\x87\xbc\x57\x26\x0c\x73\x89\xb1\x43\x5c\xd7\x6f\x8c\x57\xc3\xf9\x05\xf4\x01\xad\x6b\xc5\x2a\x2c\xd4\x1b\x31\x84\x37\x8f\x56\x7b\x67\x53\xa3\x50\xac\x25\xbd\xdd\xf6\xde\x6f\xb7\x5f\xf1\xeb\x31\xf1\xf1\xd7\xb5\x28\x81\x7f\xc3\xe7\xf0\xd3\xde\x3d\x17\xc6\x05\x08\x69\x58\x5d\xf3\xaa\xb0\xde\xec\x2f\x41\x96\xc2\xaf\x4c\xe9\x39\x5b\x4c\xf8\x23\xe6\xbe\x5c\x2d\xf8\x92\x57\x46\xdb\xda\x6a\x2a\xae\x5c\x60\x64\x89\x54\xb3\x74\xf5\x30\x4b\x79\x95\xcb\x02\x2b\x94\xfe\x8f\x1e\xf8\xb7\x58\xcd\x72\x5d\xe5\x10\xeb\x03\x10\x0c\xfa\x1e\xe2\x01\xc4\x9f\xbf\x64\x4f\x86\x0f\x81\x2b\x25\xd5\x00\xea\x30\xd8\x30\x05\x05\x33\x0c\x5c\xf5\xb1\xf6\x1a\x4b\x95\xcf\x41\x93\xf6\x55\xd8\xe4\x4c\x13\xfe\x47\x00\x3a\x0f\x83\xc0\x3a\xb8\x80\xc8\x8a\x7f\xb9\xbb\xb9\x76\xaa\x88\x1c\x38\x58\x82\x82\x97\x6c\xbd\x30\x74\xdb\x15\x17\x2a\xb1\x18\x02\xb6\x66\x32\xa6\x60\xcb\x38\xba\xaf\x9a\xe6\x58\xba\xac\x60\xfa\x76\x33\x05\xea\x2a\xec\x17\xcc\x4b\x47\xd8\x27\x83\x30\x40\x73\xde\x86\xcb\x37\x26\xff\x83\x21\x59\x0c\xb7\x16\xf8\xfb\x6a\xf9\x2f\xa0\x6f\x5f\xf7\xc0\x3f\x3b\x84\xfe\x8e\x9b\x38\xf3\xe1\x0c\x1c\xfc\x84\x2f\x82\x4e\xa0\xfa\xc9\x4b\x26\x4a\x2c\x63\xf7\x11\x67\x18\xf0\x34\x9a\x0e\x7a\x15\x31\xea\xb4\x9a\x3c\xc3\x9b\xd0\x3d\xd3\x58\x89\xa3\xd5\x7a\xb1\x22\x2f\x17\xe3\xdd\x5b\xfd\x8e\x66\x4e\xc2\x91\x81\xa4\xea\x18\xb5\x53\x9f\xae\x22\xa3\xcc\xde\xb1\x03\xea\x94\xda\x92\x45\x45\x02\x59\xda\xb3\x63\x12\x74\xb0\xc6\xe4\x3c\x99\xdc\xfd\x76\x05\xdf\xd6\x5c\x3d\xbd\x38\x06\x3d\xeb\x38\x06\x0e\x61\x8b\xff\x7f\xdf\xeb\x3e\x33\x87\xfd\x28\x7b\xde\xe9\x5d\xf6\x51\x64\x93\xdf\xa3\x4e\xe7\xf4\x96\x63\x56\xc8\x5c\x58\x05\x51\x71\xe2\x51\xcd\x0d\x01\xb1\x62\x0a\xaf\x21\x31\x6a\x28\xa5\x0a\x1d\x0b\x53\x3a\x25\xb5\x54\xdf\x50\x02\x70\x69\x20\x67\x15\x91\xa9\xe6\x48\xe3\x0b\xf1\x17\x72\x28\xab\x0a\xb4\xa2\x35\x2f\xc2\x8c\x9b\xef\x9c\x57\xa4\xdd\x88\x9c\xdc\x68\xa0\x7e\xb1\x24\x8b\x28\x5b\xb4\x9b\x75\x84\x31\x10\xda\xb8\x0a\x8c\x9d\x96\x23\xe4\xbb\x1b\xbf\xa3\x77\x8b\xb5\xdf\x17\xc9\xce\x05\x07\x6c\x18\x7c\xb4\x64\xaf\x71\x44\x0e\x18\x73\x4a\x98\xfe\xa9\x65\x75\x1e\xb9\xbd\xa0\xa3\x69\x18\xdc\xa8\x82\xab\x9f\x9f\x76\x03\x68\x84\x41\xe0\x1f\x48\x27\xa0\x07\xce\xdd\xbe\x17\x47\xd4\x41\x6b\x9f\xee\xe0\xed\xa3\xc5\xf1\xf1\xf8\xf5\x66\xcf\x7a\xc5\x73\x51\x8a\x9c\x00\xdb\x5d\xd8\x2f\x80\xe4\xed\x74\x18\xb9\x40\x0e\xc4\xd6\x0f\x8d\xf2\xf8\x9d\x2d\xd6\x34\x03\xf8\xbc\x64\x39\xaf\xb7\xcd\x8d\x0d\x29\x2c\x34\x2b\xb7\xf5\xa1\xc5\xdd\x79\x6b\xe5\x0d\x38\xfe\x9b\xde\x7c\x90\x55\x21\x8c\x90\xd5\xfe\xa3\x4e\xe1\x5f\xe5\x8d\xe0\x30\x4c\x4d\x09\x2c\x42\xb4\xba\xa1\x10\x8a\xe7\x46\x6c\x90\x32\xfc\xa6\x3f\x11\xb1\xc6\xe4\x3f\x00\x6b\xc4\x75\x8e\xc3\x47\x43\x92\x49\xb9\x68\xf4\x05\x8a\x7d\xf8\x69\xb7\x03\xe0\x70\x9f\x76\x58\x37\x44\xa3\xf6\x38\x7f\xe7\xfa\x00\x3e\x71\x33\x21\xe6\x78\xc6\x39\x1d\x41\x24\xed\x05\x62\x08\x8c\xe3\xd5\x96\xfd\xb4\xa0\xdd\xcf\x5f\xf6\x4a\x45\x2e\xfc\x84\x10\x87\x3d\xd3\xd7\xe8\x27\x20\xae\xf8\x8a\xdb\x95\x6e\x38\xd6\xd3\x8d\xde\x72\xa1\xb7\x60\x77\xd3\xde\x73\x54\x3a\xe4\xcf\xa1\x4c\xec\x61\x48\x22\xdb\x90\x24\xb2\x07\x2b\x6a\x3a\x8d\xa4\xcd\xd9\x2a\xda\x6e\x22\x4d\xfb\x41\xaa\x6d\xeb\x9a\xb6\x14\x5b\xad\xb0\x6c\xb1\x17\x0c\xfd\xa8\xd9\x05\xd2\xc2\xe8\x95\x27\xa1\xe7\x5b\x89\xaa\xd2\x24\xd7\x12\x49\x6b\x78\x5f\x45\x89\xfb\xbc\x75\x2b\xec\x00\xe8\x7a\x6c\x47\xdf\x89\x87\x14\xf6\x29\x51\x5e\x89\xa5\xa0\x3f\x6d\xd8\x78\xfd\xb0\x54\x62\x15\xa7\x25\x5c\x96\xb8\x3d\x0e\xd9\x72\x9a\xd7\x1b\x7b\x5f\x14\xae\x0f\xe2\xf2\xc8\xf4\x0d\x61\xb3\xcf\x4d\xb8\x4d\x7e\x40\x46\x43\xc8\x7f\x48\x3d\x03\x6a\x6c\xea\xc8\xa3\x44\xda\x2b\x51\xd9\xd4\xc5\xf7\xe5\xa6\xe9\xca\xae\x29\x65\xaf\x25\x7b\x1d\x99\xf7\xfa\x11\xdb\xb1\x37\x17\x6d\x43\x76\x32\xec\xc9\xc1\xeb\xc1\xbb\xeb\x5a\xef\x38\x7a\x42\xef\xd1\x95\xfd\x9b\xde\xb5\x14\x5c\x1c\xe4\xc5\x43\xb9\xf7\x7b\xb2\x6f\xf6\xe4\x56\x74\x5b\xd3\xb1\x4d\xcb\x63\x6e\x4d\x7a\x8e\xb1\xd2\x97\xa8\xc5\xde\x75\xcc\x62\x8f\xbd\xe9\xa6\x6f\x7c\x90\xec\xfc\x49\xdb\x9f\x72\xfb\x2f\x61\x1b\xfe\x1d\x00\x00\xff\xff\x4e\x72\x96\xa5\x56\x0f\x00\x00")

func templatesSearch_requestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_requestTmpl,
		"templates/search_request.tmpl",
	)
}

func templatesSearch_requestTmpl() (*asset, error) {
	bytes, err := templatesSearch_requestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_request.tmpl", size: 3926, mode: os.FileMode(420), modTime: time.Unix(1447473991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/search_request.tmpl": templatesSearch_requestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"search_request.tmpl": &bintree{templatesSearch_requestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

