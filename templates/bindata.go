// Code generated by go-bindata.
// sources:
// templates/search_request.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSearch_requestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x83\xd6\xa2\x72\xe0\x49\x7b\x0e\x90\x87\xae\x76\x8b\x0e\x59\x82\x25\xce\x80\xa1\x28\x66\x4a\xa2\x6c\x2e\xb6\xe8\x92\xb4\x9b\x4c\xf0\xff\xbe\x3b\x92\xfa\x61\xc7\x4e\xe2\x6d\x4f\xa6\x78\xe4\xf1\xee\xbb\xef\xbe\xf3\x8a\xe5\xf7\x6c\xc6\x41\x73\xa6\xf2\x79\x98\x9e\x85\xc1\xa7\xf1\xd5\xf8\xe6\xfd\x64\x3c\x82\x0f\xd7\xa3\xf1\x10\xfe\xb8\xbe\xbb\x81\xf1\xe8\xf3\xe4\x16\xde\xdf\x8c\xe1\xe3\xdd\xe4\xf3\xe5\x38\x0c\x83\x19\xaf\xb8\x62\x86\x17\x50\x2a\xb9\x84\xba\x4e\x26\x8f\x2b\x7e\xc5\x96\x7c\xbb\x0d\x83\xb5\x16\xd5\x0c\xe6\xc6\xac\xce\xd3\x74\x26\xcc\x7c\x9d\x25\xb9\x5c\xa6\x99\x12\xac\xd2\x86\xa9\x7b\x9e\xce\xe4\x8f\x19\x9f\x71\x93\x7a\x57\x52\xa5\x2e\x0e\xae\xc2\xb3\x34\x0c\xc5\x72\x25\x95\x81\x38\x0c\xa2\x72\x69\x22\xfc\xd1\x46\xa1\x5b\x1d\xe1\xf3\xd1\x4b\x4e\x1b\x57\x51\x38\x08\x29\xb1\x9d\x00\x3f\x0a\xbe\x28\x40\x68\x60\x50\xda\xe5\x77\xf4\x26\x2a\x30\x73\xbe\x9b\x09\xe0\x93\xeb\xdc\x84\x66\xce\x8c\x3d\x9f\x2d\x38\x18\x09\x19\xc7\x8b\x0b\xc3\x15\xe6\x2f\xab\x21\x68\x8c\xd4\x2f\xa5\x02\xc5\xcd\x5a\x55\xbc\x48\x28\x0f\x83\xce\xe0\xd0\xeb\x95\x09\xc3\x5c\x62\xe0\x10\xd7\xf5\x1b\xe3\xcd\x70\x7e\x01\x7d\x28\xeb\x5a\xb1\x0a\x4b\xf4\x46\x0c\xe1\xcd\x83\xb5\xde\xda\xd4\x28\x14\xeb\x49\x6f\xb7\xbd\xfb\xf6\xe3\x21\xf1\xe1\xd7\xb5\x28\x81\x7f\xc3\xdb\xf0\xd3\xde\x31\x17\xc5\x05\x08\x69\x58\x5d\xf3\xaa\xb0\x8f\xd9\x5f\x42\x2c\x85\x5f\x99\xd2\x73\xb6\x98\xf0\x07\x4c\x7d\xb9\x5a\xf0\x25\xaf\x8c\xb6\x45\xd5\x54\x55\xb9\xc0\xc0\x12\xa9\x66\xe9\xea\x7e\x96\xf2\x2a\x97\x05\x56\x27\xfd\x81\x2e\xf8\xbb\x58\xc9\x72\x5d\xe5\x10\xeb\x03\x08\x0c\xfa\x2f\xc4\x03\x88\xbf\x7c\xcd\x1e\x0d\x1f\x02\x57\x4a\xaa\x01\xd4\x61\xb0\x61\x0a\x0a\x66\x18\xb8\xca\x63\xdd\x35\x56\x2a\x9f\x83\x26\xeb\xab\xa0\xc9\x99\x26\xf8\x0f\xe3\x73\x1e\x06\x81\xf5\x7f\x01\x91\xdd\xfe\xe5\xf6\xfa\xca\x99\x22\xf2\xef\x50\x09\x0a\x5e\xb2\xf5\xc2\xd0\x69\x57\x5a\xa8\xc4\x62\x08\xc8\xca\x64\x4c\xb1\x96\x71\x74\x57\x35\xd4\x58\xba\xa4\x60\xfa\x76\x33\x05\xe2\x14\xb2\x05\xd3\xd2\x11\xb2\x64\x10\x06\xe8\xce\xfb\x70\xe9\xc6\xf4\xfe\x60\x48\x1e\xc3\xad\xc5\xfd\xae\x5a\xfe\x07\xe4\xdb\xdb\x3d\xec\xcf\x0e\x81\xbf\xf3\x4c\x9c\xf9\x70\x06\x0e\x7d\x82\x17\x31\x27\x4c\x7d\xd3\x25\x13\x25\x96\xb1\xfb\x88\x33\x0c\x78\x1a\x4d\x07\xbd\x82\x18\x75\x5a\x49\x9e\xe0\x4d\xe8\x9e\x69\xac\xc4\xb1\x62\x3d\x5b\x90\xe7\x6b\xf1\xee\xad\x7e\x47\x0d\x27\xe1\x48\x37\x52\x71\x8c\xda\x29\x4f\x57\x90\x51\x66\xcf\xd8\xee\x74\x46\x6d\x95\xa2\xa2\x0d\x59\xda\xb5\x93\x11\x7c\x60\x8d\xb9\x79\x25\xb9\xfd\xed\x12\xbe\xad\xb9\x7a\x7c\xb6\x09\x7a\xde\xb1\x09\x1c\xc0\x16\xfe\xff\x9d\xe9\x3e\x31\x87\xfc\x28\x7b\xca\xf3\x2e\xf9\x28\xb2\xb9\xef\xc9\xa6\x7b\xf3\x86\x63\x52\xa8\x5a\x58\x04\x51\x71\xd2\x50\xcd\x0d\xe1\xb0\x62\x0a\x8f\xa1\x28\x6a\x28\xa5\x0a\x9d\x02\x53\x36\x25\x11\xaa\xef\x28\x01\xf8\x6c\x20\x67\x15\x09\xa9\xe6\xa8\xdf\x0b\xf1\x37\xea\x27\xab\x0a\xf4\xa2\x35\x2f\xc2\x8c\x9b\xef\x9c\x57\x64\xdd\x88\x9c\x9e\xd1\x40\x6c\xb1\x02\x8b\x20\x5b\xb0\x9b\x21\x84\x31\x10\xd8\x38\x03\x8c\xed\x95\x23\xc2\xbb\x1b\xbf\x93\x76\x0b\xb5\x9f\x15\xc9\xce\x01\x87\x6b\x18\x7c\xb4\x42\xaf\xb1\x41\x0e\x38\x73\x46\x98\xfe\xa5\x65\x75\x1e\xb9\x99\xa0\xa3\x69\x18\x5c\xab\x82\xab\x9f\x1f\x77\x03\x68\x36\x83\xc0\x5f\x90\x6e\x83\x2e\xb8\xe7\xf6\x5f\x71\x2a\x1d\xb4\xfe\xe9\x0c\x9e\x3e\x5a\x1c\x1f\x8f\x1f\x6d\x76\xad\x57\x3c\x17\xa5\xc8\x09\xb0\xdd\x31\xfd\x0c\x48\xde\x4f\x87\x91\x0b\xe4\x40\x6c\xfd\xd0\x28\x8f\xdf\xd9\x62\x4d\x2d\x80\xd7\x4b\x96\xf3\x7a\xdb\x9c\xd8\x90\xc1\x42\xb3\x72\xe3\x1e\x5a\xdc\xdd\x6b\xed\x7e\x03\x8e\xff\xa6\x3b\x1f\x64\x55\x08\x23\x64\xb5\x7f\xa9\x33\xf8\x5b\x79\xb3\x71\x18\xa6\xa6\x04\x16\x21\x1a\xdb\x50\x08\xc5\x73\x23\x36\xa8\x18\x7e\xca\x9f\x88\x58\xe3\xf2\x5f\x80\x35\xe2\x3a\xc7\xe6\xa3\x26\xc9\xa4\x5c\x34\xf6\x02\xb7\x7d\xf8\x69\x37\x01\xe0\x30\x4f\x3b\xac\x1b\x9d\x51\x7b\x8a\xbf\x73\x7c\x00\x9f\xb8\x99\x90\x70\x3c\x91\x9c\x4e\x20\x92\xf6\x00\x29\x04\xc6\xf1\x6a\xcf\xbe\x5b\xd0\xef\x97\xaf\x7b\xa5\xa2\x27\x7c\x87\x90\x84\x3d\xb1\xd7\xf8\x4e\x40\x5a\xf1\x27\xce\x56\x3a\xe1\x44\x4f\x37\x76\x2b\x85\xde\x83\x9d\x4c\x7b\xd7\xd1\xe8\x90\x3f\x87\x32\xb1\x8b\x21\x6d\x59\x42\xd2\x96\x5d\xd8\xad\x86\x69\xb4\xdb\xac\xad\xa1\x65\x13\x59\xda\x0f\x32\x6d\xdb\xa7\x69\x46\xb1\xd5\x0a\xcb\x16\xfb\x8d\xa1\x6f\x35\x3b\x3f\x5a\x18\xbd\xf1\x24\xf4\x3c\x95\xa8\x2a\x4d\x72\xad\x90\xb4\x8e\xf7\x4d\x94\xb8\xcf\x5b\xb7\x9b\x1d\x00\x1d\xc7\x76\xec\xdd\xf6\x90\xc2\x3e\x25\xca\x4b\xb1\x14\xf4\x8f\x0d\x89\xd7\x0f\x4b\x25\xd6\x70\x5a\xc2\x65\x89\xd3\xe3\x90\x2f\x67\x79\xbd\xb3\xf7\x45\xe1\x78\x10\x97\x47\xba\x6f\x08\x9b\x7d\x6d\xc2\x69\xf2\x82\x18\x0d\x21\x7f\x51\x7a\x06\x44\x6c\x62\xe4\x51\x21\xed\x95\xa8\x6c\xea\xe2\x79\xb9\x69\x58\xd9\x91\x52\xf6\x28\xd9\x63\x64\xde\xe3\x23\xd2\xb1\xd7\x17\x2d\x21\xbb\x3d\xe4\xe4\xe0\xf5\xe0\xdd\x76\xd4\x3b\x8e\x9e\xd0\x7b\x72\x65\xff\xa3\x77\x94\x82\x8b\x83\xba\x78\x28\xf7\x3e\x27\xfb\x6e\x4f\xa6\xa2\x9b\x9a\x4e\x6d\x5a\x1d\x73\x63\xd2\x6b\x8c\xdd\x7d\x4e\x5a\xec\x59\xa7\x2c\x76\xd9\xeb\x6e\xfa\xc6\x0b\xc9\xce\x7f\xb4\xfd\x2e\xb7\xff\x12\xb6\xe1\x3f\x01\x00\x00\xff\xff\xc1\x09\x9c\x87\x4c\x0f\x00\x00")

func templatesSearch_requestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_requestTmpl,
		"templates/search_request.tmpl",
	)
}

func templatesSearch_requestTmpl() (*asset, error) {
	bytes, err := templatesSearch_requestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_request.tmpl", size: 3916, mode: os.FileMode(420), modTime: time.Unix(1457034925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/search_request.tmpl": templatesSearch_requestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"search_request.tmpl": &bintree{templatesSearch_requestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

