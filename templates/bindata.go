// Code generated by go-bindata.
// sources:
// templates/searchRequest.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSearchrequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x57\x5b\x8f\xdb\x36\x13\x7d\x16\x7f\xc5\x40\xc8\xf7\x45\x5a\xb8\x72\xfb\xba\xc0\x3e\x24\xb1\x93\xba\x68\x77\xd1\xc4\x29\x50\x04\xc1\x2e\x25\x51\x6b\x35\xb6\xe4\x90\xd4\x36\xae\xe0\xff\xde\x19\x92\xba\xae\xed\xbd\x00\x7d\x69\x03\x24\x96\x38\xe4\x5c\x8e\xce\x9c\x61\xb6\x3c\xf9\xc2\x6f\x05\x28\xc1\x65\xb2\x62\xd3\x33\xe6\xbd\x9b\x5f\xce\xdf\xbf\x5a\xce\x67\xf0\xe6\x6a\x36\x9f\xc0\xec\x0a\x2e\xaf\x96\x30\x9f\x2d\x96\x8c\x79\xb7\xa2\x10\x92\x6b\x91\x42\x26\xcb\x0d\xd4\x75\xb4\xdc\x6d\xc5\x25\xdf\x88\xfd\x1e\x2a\x95\x17\xb7\xb0\xd2\x7a\x7b\x3e\x9d\xde\xe6\x7a\x55\xc5\x51\x52\x6e\xa6\xb1\xcc\x79\xa1\x34\x97\x5f\xc4\xf4\xb6\xfc\x2e\x16\xb7\x42\x6b\x21\xa7\xce\x59\x29\xa7\x36\xbe\x90\xec\x6c\xca\x58\xbe\xd9\x96\x52\x43\xc0\x3c\x3f\xdb\x68\x1f\x7f\x94\x96\xe8\x59\xf9\x98\x80\xdf\xf3\x8b\x6e\x62\x29\x78\x3a\xfd\x4b\x54\xaa\xf5\x81\x07\xe8\x1d\x8e\xef\xd4\x98\x32\x3a\x0b\x19\xa3\xa7\x61\x11\x1f\x8c\x97\xb7\xb9\x58\xa7\x90\x17\x9a\xb1\xa4\xc4\xd4\x21\xa8\xeb\x17\xda\x6d\x82\xf3\x0b\xe8\x9d\x60\x75\x2d\x79\x81\x20\xbe\xc8\x27\xf0\xe2\x9b\xb1\x5a\x2f\x3c\x5e\x0b\xe3\x49\xed\xf7\xbd\xf3\x4d\x90\x6b\x5c\xfb\x16\x39\xec\xea\x3a\xcf\x40\x7c\x45\x27\xf0\xfd\xc1\xdd\x36\xa5\x0b\xc8\x4b\xcd\xeb\x5a\x14\xa9\x89\x6c\x7e\xb1\x90\xac\x2a\x12\x08\xd4\xd1\x5a\x42\xf8\x85\x4b\xb5\xe2\xeb\xa5\xf8\xa6\x83\x10\x82\x4f\x9f\xe3\x9d\x16\x13\x10\x52\x96\x32\x84\x9a\x79\x77\x5c\x42\xca\x35\x07\x8b\x36\x62\xad\xfe\xcc\x75\xb2\x02\x45\xd6\x47\x15\x99\x70\x45\x70\x9e\xac\xf4\x9c\x79\x9e\x09\x73\x01\xbe\x59\xfe\x49\x95\x85\x35\xf9\x14\xc6\x56\xe6\xa5\x22\xe3\xd5\x5a\xd3\x6e\x29\x74\x25\x0b\x28\xf2\xf5\x04\x90\x10\xd1\x9c\x52\xce\x02\xff\x0d\x2f\x8a\x52\xc3\xc6\x16\x06\x1a\x2b\x83\x97\xff\xbb\x7b\xe9\x4f\x40\x85\xcc\x43\x27\xee\xa4\xad\x35\xa0\xa8\xe1\x84\xfc\xb0\xfd\x13\x10\x7b\x9d\x17\x5c\xee\xfe\x9d\x98\xc5\xa6\xb6\x67\xa0\x76\x76\x1c\xb6\x8f\xc5\xa6\x47\xb5\xd8\xf9\x09\x2d\x6a\x04\x0b\x62\x45\x58\xb8\xa6\x8e\x96\x32\xdf\x04\xf6\x25\x88\x31\xd2\x8d\x7f\x13\xf6\x80\xd4\xf2\x69\x50\xde\x03\x88\xe0\x38\x53\x08\xdd\x03\x20\x9f\x04\xf2\x00\x86\x55\x31\x62\x9e\x32\x18\x6a\x39\x40\xf1\x19\xb8\x39\xc2\xfd\x17\x90\x6b\xf9\xf7\x18\xec\x8e\x43\x37\x8b\xcd\x03\x59\xb0\x4f\x2d\x22\x06\xaf\x7f\xaa\x19\x5d\x82\x16\xb1\x59\x7c\xbf\x15\xbb\x22\x7c\x9f\x6a\x38\x36\x68\xde\x8b\xaf\x95\xc0\xf9\x82\x39\x57\x89\x36\x39\xbb\x31\x16\x0d\x36\xd8\x04\x99\xf7\x36\x5f\xe3\xe4\x54\x48\x8d\x83\x68\x90\x11\x6e\xfe\xc0\x4f\x78\xee\x67\x76\xab\x7f\xc3\xbc\x2b\x99\x0a\xf9\x7a\x37\x4c\xa0\x59\xf4\x3c\x77\xa0\xb4\x0b\x74\xc0\x86\x3b\x16\x85\x06\x91\xd7\x46\xa1\x9d\x74\x66\xa1\x5e\xef\x16\x33\x80\xb8\x2c\xd7\x30\xfa\xd3\xc6\xc8\x69\x53\x8a\xdb\x4f\x60\xe2\xca\xe8\x20\xb1\x11\x8f\xa6\xd2\xcf\x84\x12\xf9\x8d\xaf\x2b\x41\xc3\x5b\xc8\x8c\x27\xa2\xde\x37\x3b\xee\xc8\x60\xf0\xd8\xda\x7b\x07\xb4\x60\xdb\x98\xed\x7a\x83\x88\x7b\xa7\x33\x6f\xca\x22\xcd\x75\x5e\x16\xe3\x43\x9d\xc1\x9d\x4a\x9a\x85\x63\x65\x36\xc8\x3f\xbb\xc2\x99\x50\x09\x12\x8d\x58\x6e\xd0\x76\xf6\x14\x97\x6d\x4c\xbc\xc8\x0d\x9c\x99\x2f\x63\x6e\x32\x14\x51\x01\x3f\xc5\x45\x5d\xc2\xb6\x5a\xaf\xd9\x68\x13\xc4\x3b\xc8\xf5\x4b\x05\x8b\x59\xc4\xd8\xef\x65\x05\x09\x2f\x80\xa7\x29\xfd\x35\xf5\x62\x43\x97\x5b\x7a\x50\xee\x2a\x48\x9d\x6b\xde\xf1\xc0\x8f\xbc\x48\xd7\x44\xdd\x0d\xdf\x41\xb2\x2a\x4b\xec\x34\x8c\xe4\xba\x24\x18\x0a\x63\x3b\x63\x63\xda\x2b\x92\x2f\xe4\x4d\xaf\x04\x5b\x28\x9b\x2b\x15\x84\xad\xde\x04\x88\xe8\xe2\x68\x74\xe2\x5e\xd9\x01\x56\x4e\xb7\xbe\xe8\x63\x95\xa7\x93\x36\xc1\x28\x8a\x68\x7f\x70\x48\x90\x1d\x10\x61\x78\x0a\x25\x37\xfd\xd5\x70\xf1\xe8\x7e\xd6\x74\xb6\x7b\x8f\x5e\xa5\xa9\xe5\x0f\xde\x73\xbd\x03\xe7\x50\x72\xa2\x05\x6a\xc9\x04\xcd\x8b\x19\xfd\xdb\xf2\xae\xa1\xe9\xf5\xfc\xd7\xc1\x7a\xcb\xc4\xeb\x57\x97\xb3\xf0\x5e\xc4\x9f\xf3\x4d\xae\x51\xcd\x7f\x18\x1b\x5c\xe7\x5e\x00\xb2\x43\xe0\xb1\x0c\x3b\xe0\x1a\xef\x0d\x24\x92\x56\x34\x1b\xd4\xb0\x68\x2f\x0b\xfe\x3f\x38\x6e\x24\xbb\x95\xbb\x81\xc9\x50\x71\x0a\x78\xa1\x5f\x8b\x8d\x28\x34\x1c\x16\xb7\xae\x57\x1b\xad\x97\x07\x07\x65\x13\x10\xde\x09\xbd\x24\xd9\xbe\x27\xf8\x9d\x2e\x47\xed\x06\x12\xe6\x6e\x8a\x3c\xec\xd9\x49\x2c\xfa\xfd\xf4\x79\xd4\xea\x14\xc2\xc9\x2a\x61\x73\xcf\x5e\xef\x0f\xa2\xa7\x1a\xbb\x03\xd0\xfa\xa2\x41\x3e\x3a\x8e\x46\x2b\x05\xe7\x90\x45\xe6\x81\xbe\xaf\x15\x34\x5a\x32\x0f\x66\xa9\xa1\x00\xad\x36\xcf\xc6\xd0\x72\x80\x2c\xed\x0b\x99\xf6\x6d\x68\x1a\xe9\x7c\xbb\x45\x05\x09\xdc\x02\xa6\x6b\x1e\x86\xdf\xd2\x19\x9f\x84\x9e\xd3\x36\xfa\x2a\x2d\x5d\x9b\xe9\x33\x22\x49\x67\xa2\xc2\x5d\xdd\xaa\x5d\xec\x00\xe8\xe4\x6e\x60\xef\x96\x27\x94\xf6\x53\xb2\x34\xad\x80\x39\x22\xf1\xfa\x69\x49\xdb\x23\x4f\x2b\x38\xcb\x94\x38\xe8\xcb\x5a\x1e\xef\x6c\xa4\x6d\x46\xd9\x07\x0e\x6d\x9f\x3e\xde\x61\x27\x31\xd9\xc9\xf9\x32\x81\xbb\xf1\xc8\x24\xa1\x3c\x3d\x23\x27\x90\x3c\x38\x11\x43\xea\x17\x22\xfa\xd1\x29\xdf\xfb\xf2\x59\xf3\xb9\x1d\xdd\xef\x1a\xb2\x77\x5c\x2f\x7b\x4c\xef\x11\x3d\xe9\xd1\x1c\x59\xde\x6b\xb7\x96\xe7\xdd\x1a\x52\x3d\x7c\x3c\x84\x1f\x3a\x46\x3f\x84\x61\xae\x46\x63\xd9\xfc\x0f\xb1\xe3\x2b\x5c\x1c\xbc\x05\x1c\x42\xa0\x4f\xf8\xbe\xdb\x27\xf3\xdc\xde\xe3\xac\x94\xb5\x22\x69\xaf\x6c\x4e\xc0\xcc\xea\x29\xdd\x32\x7b\xad\x6c\x99\xc7\x9e\x74\xd0\x3b\x1e\x88\x06\xd7\xef\xb1\x84\x98\x7b\xeb\x9e\xfd\x1d\x00\x00\xff\xff\xbe\xd5\x6c\x36\x6a\x12\x00\x00")

func templatesSearchrequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchrequestTmpl,
		"templates/searchRequest.tmpl",
	)
}

func templatesSearchrequestTmpl() (*asset, error) {
	bytes, err := templatesSearchrequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/searchRequest.tmpl", size: 4714, mode: os.FileMode(420), modTime: time.Unix(1447428148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/searchRequest.tmpl": templatesSearchrequestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"searchRequest.tmpl": &bintree{templatesSearchrequestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

