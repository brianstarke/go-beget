// Code generated by go-bindata.
// sources:
// templates/search_request.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSearch_requestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\x83\xbe\x2d\x2a\x07\xfe\x4a\x7b\x0e\x90\x87\xae\x76\x8b\x0e\x5d\x83\x25\xce\x80\xa1\x28\x6a\x4a\xa2\x6c\xae\xb2\xe8\x92\xb4\x9b\x4c\xf0\xff\xbe\x3b\x92\xfa\x61\xc7\x4e\xe3\x6d\x4f\xa6\xee\xc8\xfb\xf1\xb9\xbb\xcf\x79\xcd\xf2\xaf\x6c\xc1\x41\x73\xa6\xf2\x65\x98\x5e\x84\xc1\xbb\xe9\xc7\xe9\xcd\xeb\xd9\x74\x02\x6f\xae\x27\xd3\x31\xfc\x71\x7d\x77\x03\xd3\xc9\xfb\xd9\x2d\xbc\xbe\x99\xc2\xdb\xbb\xd9\xfb\x0f\xd3\x30\x0c\x16\xbc\xe6\x8a\x19\x5e\x40\xa9\xe4\x0a\x9a\x26\x99\x3d\xac\xf9\x47\xb6\xe2\xbb\x5d\x18\x6c\xb4\xa8\x17\xb0\x34\x66\x7d\x99\xa6\x0b\x61\x2a\x96\x25\xb9\x5c\xa5\x99\x12\xac\xd6\x86\xa9\xaf\x3c\x5d\xc8\xff\x67\x7c\xc1\x8d\xe1\x2a\xf5\xd6\xa4\x4a\x5d\x28\x5c\x85\x17\x69\x18\x8a\xd5\x5a\x2a\x03\x71\x18\x44\xe5\xca\x44\xf8\xa3\x8d\x42\xcb\x3a\xc2\x08\xa2\x67\xd8\x6d\xad\x45\xe1\x28\xa4\xf4\xf6\xc2\x7c\x2b\x78\x55\x80\xd0\xc0\xa0\xb4\xc7\xef\xc2\x2c\x45\x0d\x66\xc9\xf7\xf3\x01\xf4\xba\xc9\x4d\x68\x96\xcc\xd8\xfb\x59\xc5\xc1\x48\xc8\x38\x3e\xac\xd0\x0f\xa2\x20\xeb\x31\x68\x0c\xd6\x1f\xa5\x02\xc5\xcd\x46\xd5\xbc\x48\x28\x15\x83\xc6\xe0\x98\xf7\xda\x84\x61\x2e\x31\x76\x88\x9b\xe6\x85\xf1\x6a\xb8\xbc\x82\x21\xa0\x4d\xa3\x58\x8d\x85\x7a\x21\xc6\xf0\xe2\xde\x6a\x6f\x6d\x6a\x14\x8a\xb5\xa4\x77\xbb\xc1\xfb\xdd\xee\x0b\x7e\xdd\x27\x3e\xfe\xa6\x11\x25\xf0\x6f\xf8\x1c\x7e\x3a\xb8\xe7\xc2\xb8\x02\x21\x0d\x6b\x1a\x5e\x17\xd6\x9b\xfd\x25\xc8\x52\xf8\x95\x29\xbd\x64\xd5\x8c\xdf\x63\xee\xab\x75\xc5\x57\xbc\x36\xda\xd6\x56\x53\x71\x65\x85\x91\x25\x52\x2d\xd2\xf5\xd7\x45\xca\xeb\x5c\x16\x58\xa1\xf4\x7f\xf4\xc0\xbf\xc5\x6a\x96\x9b\x3a\x87\x58\x1f\x81\x60\x34\xf4\x10\x8f\x20\xfe\xf4\x39\x7b\x30\x7c\x0c\x5c\x29\xa9\x46\xd0\x84\xc1\x96\x29\x28\x98\x61\xe0\xaa\x8f\xb5\xd7\x58\xaa\x7c\x09\x9a\xb4\xcf\xc2\x26\x67\x9a\xf0\x3f\x01\xd0\x65\x18\x04\xd6\xc1\x15\x44\x56\xfc\xcb\xed\xf5\x47\xa7\x8a\xc8\x81\x83\x25\x28\x78\xc9\x36\x95\xa1\xdb\xae\xb8\x50\x8b\x6a\x0c\xd8\x9a\xc9\x94\x82\x2d\xe3\xe8\xae\x6e\x9b\x63\xe5\xb2\x82\xf9\xcb\xed\x1c\xa8\xab\xb0\x5f\x30\x2f\x1d\x61\x9f\x8c\xc2\x00\xcd\x79\x1b\x2e\xdf\x98\xfc\x8f\xc6\x64\x31\xdc\x59\xe0\xef\xea\xd5\xbf\x80\xbe\x7b\x3d\x00\xff\xe2\x18\xfa\x7b\x6e\xe2\xcc\x87\x33\x72\xf0\x13\xbe\x08\x3a\x81\xea\x27\x2f\x99\x29\xb1\x8a\xdd\x47\x9c\x61\xc0\xf3\x68\x3e\x1a\x54\xc4\xa8\xf3\x6a\xf2\x08\x6f\x42\xf7\x42\x63\x25\x4e\x56\xeb\xc9\x8a\x3c\x5d\x8c\x57\x2f\xf5\x2b\x9a\x39\x09\x27\x06\x92\xaa\x63\xd4\x5e\x7d\xfa\x8a\x4c\x32\x7b\xc7\x0e\xa8\x53\x6a\x4b\x16\x35\x09\x64\x69\xcf\x8e\x49\xd0\xc1\x06\x93\xf3\x64\x72\xfb\xdb\x07\xf8\xb6\xe1\xea\xe1\xc9\x31\x18\x58\xc7\x31\x70\x08\x5b\xfc\xff\xfb\x5e\xf7\x99\x39\xec\x27\xd9\xe3\x4e\xef\xb3\x8f\x22\x9b\xfc\x01\x75\x3a\xa7\x37\x1c\xb3\x42\xe6\xc2\x2a\x88\x9a\x13\x8f\x6a\x6e\x08\x88\x35\x53\x78\x0d\x89\x51\x43\x29\x55\xe8\x58\x98\xd2\x29\xa9\xa5\x86\x86\x12\x80\xf7\x06\x72\x56\x13\x99\x6a\x8e\x34\x5e\x89\xbf\x90\x43\x59\x5d\xa0\x15\xad\x79\x11\x66\xdc\x7c\xe7\xbc\x26\xed\x56\xe4\xe4\x46\x03\xf5\x8b\x25\x59\x44\xd9\xa2\xdd\xae\x23\x8c\x81\xd0\xc6\x55\x60\xec\xb4\x9c\x20\xdf\xfd\xf8\x1d\xbd\x5b\xac\xfd\xbe\x48\xf6\x2e\x38\x60\xc3\xe0\xad\x25\x7b\x8d\x23\x72\xc4\x98\x53\xc2\xfc\x4f\x2d\xeb\xcb\xc8\xed\x05\x1d\xcd\xc3\xe0\x5a\x15\x5c\xfd\xfc\xb0\x1f\x40\x2b\x0c\x02\xff\x40\x3a\x01\x3d\x70\xee\x0e\xbd\x38\xa2\x0e\x3a\xfb\x74\x07\x6f\x9f\x2c\x8e\x8f\xc7\xaf\x37\x7b\xd6\x6b\x9e\x8b\x52\xe4\x04\xd8\xfe\xc2\x7e\x02\x24\x6f\xa7\xc7\xc8\x05\x72\x24\xb6\x61\x68\x94\xc7\xef\xac\xda\xd0\x0c\xe0\xf3\x92\xe5\xbc\xd9\xb5\x37\xb6\xa4\xb0\xd0\xac\xdd\xd6\x87\x0e\x77\xe7\xad\x93\xb7\xe0\xf8\x6f\x7a\xf3\x46\xd6\x85\x30\x42\xd6\x87\x8f\x7a\x85\x7f\x95\xb7\x82\xe3\x30\xb5\x25\xb0\x08\xd1\xea\x86\x42\x28\x9e\x1b\xb1\x45\xca\xf0\x9b\xfe\x4c\xc4\x5a\x93\xff\x00\xac\x09\xd7\x39\x0e\x1f\x0d\x49\x26\x65\xd5\xea\x0b\x14\xfb\xf0\xd3\x7e\x07\xc0\xf1\x3e\xed\xb1\x6e\x89\x46\x1d\x70\xfe\xde\xf5\x11\xbc\xe3\x66\x46\xcc\xf1\x88\x73\x7a\x82\x48\xba\x0b\xc4\x10\x18\xc7\xb3\x2d\xfb\x69\x41\xbb\x9f\x3e\x1f\x94\x8a\x5c\xf8\x09\x21\x0e\x7b\xa4\x6f\xd0\x4f\x40\x5c\xf1\x05\xb7\x2b\xdd\x70\xac\xa7\x5b\xbd\xe5\x42\x6f\xc1\xee\xa6\x83\xe7\xa8\x74\xc8\x5f\x42\x99\xd8\xc3\x98\x44\xb6\x21\x49\x64\x0f\x56\xd4\x76\x1a\x49\xdb\xb3\x55\x74\xdd\x44\x9a\xee\x83\x54\xbb\xce\x35\x6d\x29\xb6\x5e\x63\xd9\x62\x2f\x18\xfb\x51\xb3\x0b\xa4\x83\xd1\x2b\xcf\x42\xcf\xb7\x12\x55\xa5\x4d\xae\x23\x92\xce\xf0\xa1\x8a\x12\xf7\x79\xeb\x4e\xd8\x03\xd0\xf7\xd8\x9e\xbe\x17\x8f\x29\xec\x73\xa2\xfc\x20\x56\x82\xfe\xb4\x61\xe3\x0d\xc3\x52\x89\x55\x9c\x97\x70\x59\xe2\xf6\x38\x66\xcb\x69\x9e\x6f\xec\x75\x51\xb8\x3e\x88\xcb\x13\xd3\x37\x86\xed\x21\x37\xe1\x36\xf9\x01\x19\x8d\x21\xff\x21\xf5\x8c\xa8\xb1\xa9\x23\x4f\x12\xe9\xa0\x44\x65\x5b\x17\xdf\x97\xdb\xb6\x2b\xfb\xa6\x94\x83\x96\x1c\x74\x64\x3e\xe8\x47\x6c\xc7\xc1\x5c\x74\x0d\xd9\xcb\xb0\x27\x47\xcf\x07\xef\xb6\x6f\xbd\xd3\xe8\x09\x7d\x40\x57\xf6\x6f\x7a\xdf\x52\x70\x75\x94\x17\x8f\xe5\x3e\xec\xc9\xa1\xd9\xb3\x5b\xd1\x6d\x4d\xc7\x36\x1d\x8f\xb9\x35\xe9\x39\xc6\x4a\x9f\xa2\x16\x7b\xd7\x31\x8b\x3d\x0e\xa6\x9b\xbe\xf1\x41\xb2\xf7\x27\xed\x70\xca\xed\xbf\x84\x5d\xf8\x77\x00\x00\x00\xff\xff\x46\x02\xf0\x66\x56\x0f\x00\x00")

func templatesSearch_requestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearch_requestTmpl,
		"templates/search_request.tmpl",
	)
}

func templatesSearch_requestTmpl() (*asset, error) {
	bytes, err := templatesSearch_requestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/search_request.tmpl", size: 3926, mode: os.FileMode(420), modTime: time.Unix(1447705577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/search_request.tmpl": templatesSearch_requestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"search_request.tmpl": &bintree{templatesSearch_requestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

