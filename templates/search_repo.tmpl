package search
/*
	GENERATED CODE, YOUR EDITS ARE FUTILE

	generated from {{.TypeName}}
	using http://github.com/brianstarke/go-beget/generator/searcher
*/

import (
	"fmt"
	"strings"

	"github.com/jmoiron/sqlx"
	"github.com/brianstarke/go-beget/searcher"

  types "{{.TypeImport}}"
)

// {{.TypeName}}Searcher is the interface
type {{.TypeName}}Searcher interface {
	Search(searchRequest {{.TypeName}}SearchRequest) ([]types.{{.TypeName}}, error)
}

// SQL{{.TypeName}}Searcher implements a SQL based searcher
type SQL{{.TypeName}}Searcher struct {
	db *sqlx.DB
}

// NewSQL{{.TypeName}}Searcher returns a configured repo for you
func NewSQL{{.TypeName}}Searcher(db *sqlx.DB) {{.TypeName}}Searcher {
	return &SQL{{.TypeName}}Searcher{db:db}
}

// Search converts a {{.TypeName}}SearchRequest in to SQL and executes it
func (r *SQL{{.TypeName}}Searcher) Search(searchRequest {{.TypeName}}SearchRequest) ([]types.{{.TypeName}}, error) {
	results := []types.{{.TypeName}}{}

	sqlStr, values, err := searcher.GenerateSelectSQL(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating SQL for {{.TypeName}}SearchRequest : %s", err.Error())
	}

	err = r.db.Select(&results, sqlStr, values.([]interface{})...)

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return results, nil
		}
	}

	return results, err
}

// GetByField is a convenience method to return just one result by matching on a single field
func (r *SQL{{.TypeName}}Searcher) GetByField(field {{.TypeName}}Field, value interface{}) (*types.{{.TypeName}}, error) {
	var searchRequest {{.TypeName}}SearchRequest

	searchRequest.AddFilter(
		field,
		value,
		searcher.EQ,
		searcher.AND,
	)
	searchRequest.Limit = 1

	sqlStr, values, err := searcher.GenerateSelectSQL(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating GetBy %s SQL for {{.TypeName}} : %s", field, err.Error())
	}

	var result types.{{.TypeName}}
	err = r.db.Get(&result, sqlStr, values.([]interface{})...)

	if err != nil {
		return nil, err
	}

	return &result, err
}
